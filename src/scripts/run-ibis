
# Start of script template. If there are shell-variable assignments before this
# line, this is NOT the template, and is a generated script. Look in
# $IBIS_ROOT/src/scripts/run-ibis instead.

#
# find out if this is a prun run ...
#
if [ -z "$PRUN_ENV" ]
then
	prun=0
	Dns_pool=
	PRUN_CPU_RANK=0
	NHOSTS=1
	run_name=$0
else
	prun=1
	# prun mangles the program name ($0) into something like
	# ./run-ibis.0.8949.fs0, which does not look nice.
	run_name=run-ibis
	NHOSTS=`echo $PRUN_HOSTNAMES | awk '{print NF}'`
	case X$1 in
	X$PRUN_CPU_RANK)
		case X$2 in
		X$NHOSTS)
			# User probably forgot to pass the -no-panda flag
			shift
			shift
			;;
		esac
		;;
	esac
	Dns_pool="-Dibis.name_server.key=$PRUN_ENV"
	Dpool_total="-Dibis.pool.total_hosts=$NHOSTS"
	Dpool_host_num="-Dibis.pool.host_number=$PRUN_CPU_RANK"
	Dpool_host_names="-Dibis.pool.host_names=\"$HOSTS\""
fi

function usage () {
	echo "Usage:"
	if [ $prun -eq 0 ]
	then
		echo "  $run_name <$run_name params> <jvm params> <classname> <application params>"
	else
		echo "  prun -1 -v -no-panda $run_name <$run_name params> <jvm params> <classname> <application params>"
	fi
	cat << 'EOF' | sed "s#run-ibis#$run_name#"
The first parameter that is not recognized as an option to run-ibis
terminates the run-ibis parameters.
The run-ibis options are:
-attach
    set jvm parameters so that jdb can attach to the running process
-cd <dir>
    when using the javawrapper, make it change to directory <dir>
    before starting java
-cpu <cpuaffinity>
    when using the javawrapper, make it use the specified cpuaffinity
EOF
	if [ $prun -eq 0 ]
	then
		cat << 'EOF'
-nhosts <nhosts>
    specifies the total number of hosts involved in this run
-hostno <hostno>
    specifies the rank number of this host (0 .. <nhosts>-1)
EOF
	fi
	cat << 'EOF'
-singlecpu
    specifies that the javawrapper must be used
-no-singlecpu
    specifies that the javawrapper must not be used
-jdb
    execute jdb instead of java
-no-jit
    disable just-in-time compiling
-no-pool
    don't pass on any node-pool information to the application
-n
    only print the run command, don't actually execute it
-ns <nameserver>
    specifies the hostname on which the nameserver runs
-ns-port
    specifies the port number on which the nameserver is listening
-ns-retry
    specifies that the application should retry to connect to the nameserver
    until it succeeds. The default behavior is to exit when connecting to the
    nameserver fails
EOF
	if [ $prun -eq 1 ]
	then
		cat << EOF
-ns-d
    use a dedicated nameserver, one of the nodes in the run is used solely
    for this purpose
EOF
	fi
	cat << 'EOF' | sed "s#run-ibis#$run_name#"
-pg <prefix>
    pass profiling flags on to java, use <prefix> for the result file
-p <prefix>
    pass different profiling flags on to java, use <prefix> for the result file
-key <key>
    use the specified key to identify this run with the nameserver
-?
    print this message
--
    terminates the parameters for run-ibis; following parameters are passed
    on to java, even if they would be acceptable to run-ibis
EOF
	exit 1
}

if [ -z "$1" -o $# -le 0 ]
then
	usage
fi

JAVACLASSPATH=$CLASSPATH:build:$IBIS_ROOT/classlibs:$IBIS_ROOT/build:

#needed for ibm 1.3 JITs and SMPs
export LD_ASSUME_KERNEL=2.2.5

#
# Some Panda Ibis stuff
#

#disable panda interrupts
#export IBP_NO_INTR=1

# fix panda/lfc flow control
#export LFC_SEND_COPY_ASIDE=1
#export PAN_SYS_CREDITS=65535

if [ -z "$LFC_INTR_FIRST" ] ; then
	export LFC_INTR_FIRST=100
fi
if [ -z "$IBP_SEND_SYNC" ] ; then
	export IBP_SEND_SYNC=100 
fi
if [ -z "$PAN_COMM_NO_IDLE_POLL" ] ; then
	export PAN_COMM_NO_IDLE_POLL=1
fi

#
# java.library.path and ibis.library.path ...
#

Dlibpath="-Djava.library.path=$IBIS_ROOT/build/lib:.:$LD_LIBRARY_PATH:"

# This is the location where all ibis native libs must go.
# It must be *one* dir.
Dibislibs="-Dibis.library.path=$IBIS_ROOT/build/lib"

#
# Some defaults ...
#

cpumask="1"
attach=0
noJIT=0
dedicated_nameserver=0
no_pool=0
portno_specified=0

JAVA_EXEC=java
Xbootclasspath="-Xbootclasspath/p:$JAVACLASSPATH"

action=eval

#
# nameserver defaults
#

. $IBIS_ROOT/bin/ns-env

Dns_server="-Dibis.name_server.host=$IBIS_NAMESERVER_HOST"
Dns_port="-Dibis.name_server.port=$IBIS_NAMESERVER_PORT"
Dns_retry="-Dibis.name_server.retry=$IBIS_NAMESERVER_RETRY"
Dns_pool="-Dibis.name_server.key=no_key_supplied"

dir=$PWD

#
# parse arguments
#

while [ $# -gt 0 ]
do
# echo now inspect argument $1 -- left $#
        case "$1" in
	-attach)
		attach=1
		;;
        -cd)
		shift
		dir="$1"
                ;;
        -cpu)
		shift
		cpumask="$1"
                ;;
	-nhosts)
		shift
		case $prun in
		1)  echo "$run_name: -nhosts only works without prun" 1>&2
		    exit 1
		    ;;
		esac
		Dpool_total="-Dibis.pool.total_hosts=$1"
		NHOSTS=$1
		;;
	-hostno)
		shift
		case $prun in
		1)  echo "$run_name: -hostno only works without prun" 1>&2
		    exit 1
		    ;;
		esac
		Dpool_host_num="-Dibis.pool.host_number=$1"
		PRUN_CPU_RANK="$1"
		;;
	-singlecpu)
		USE_JAVAWRAPPER=1
		;;
	-no-singlecpu)
		USE_JAVAWRAPPER=0
		;;
	-jdb)
		JAVA_EXEC=jdb
		;;
	-no-jit)
		noJIT=1
		;;
	-no-pool)
		no_pool=1
		;;
	-n)
		action=echo
		;;
	-ns)
		shift
		case $1 in
		*:*)
			# "new" syntax: <nameserver-host>:<portno>
			if [ $portno_specified -eq 1 ]
			then
				echo "$run_name: nameserver port specified more than once" 1>&2
				exit 1
			fi
			Dns_server="-Dibis.name_server.host="`expr "$1" : '\(.*\):.*'`
			Dns_port="-Dibis.name_server.port="`expr "$1" : '.*:\(.*\)'`
			portno_specified=1
			;;
		*)
			Dns_server="-Dibis.name_server.host=$1"
			;;
		esac
		;;
	-pg)
		shift
		gprof="$1"
		;;
	-p)
		shift
		prof="$1"
		;;
	-ns-port)
		if [ $portno_specified -eq 1 ]
		then
			echo "$run_name: nameserver port specified more than once" 1>&2
			exit 1
		fi
		portno_specified=1
		shift
		Dns_port="-Dibis.name_server.port=$1"
		;;
	-ns-d)
		case $prun in
		0)  echo "$run_name: dedicated nameserver only works with prun" 1>&2
		    exit 1
		    ;;
		esac
		dedicated_nameserver=1
		;;
	-ns-retry)
		Dns_retry="-Dibis.name_server.retry=yes"
		;;
	-no-ns-retry)
		Dns_retry="-Dibis.name_server.retry=no"
		;;
	-karmi)
		Xbootclasspath=""
		JAVACLASSPATH="$CLASSPATH:build:$KARMI/karmi.jar:$IBIS_ROOT/build:"
		;;
	-karmi-gm)
		Xbootclasspath=""
		Dlibpath="$Dlibpath$KARMI/lib:"
		JAVACLASSPATH="$CLASSPATH:build:$KARMI/karmi.jar:$IBIS_ROOT/build:"
		;;
	-ip-map)
		shift
		ip_map="$1"
		ip_addr=`$IBIS_ROOT/bin/ip_map.perl $ip_map \`hostname\``
		JIT_OPTS="$JIT_OPTS -Dibis.util.ip.address=$ip_addr"
		# This is required if Sun's RMI is used
		JIT_OPTS="$JIT_OPTS -Djava.rmi.server.hostname=$ip_addr"
		if [ $prun -eq 1 ]
		then
		    export HOSTS="`$IBIS_ROOT/bin/ip_map.perl $ip_map $HOSTS`"
		    # echo HOSTS $HOSTS
		    # echo PRUN_HOSTNAMES $PRUN_HOSTNAMES
		    export PRUN_HOSTNAMES="`$IBIS_ROOT/bin/ip_map.perl $ip_map $PRUN_HOSTNAMES`"

		    # echo PRUN_HOSTNAMES $PRUN_HOSTNAMES
		fi
		;;
	-key)
		shift
		Dns_pool="-Dibis.name_server.key=$1"
		;;
	-?)
		usage
		;;
	--)
		shift
		break
		;;
        *)      
		break
                ;;
        esac
        shift
done

#
# if no_pool is set, kill all pool info
#

if [ $no_pool -eq 1 ]
then
	Dpool_total=
	Dpool_host_num=
	Dpool_host_names=
fi
if [ $noJIT -eq 1 ]
then
	JIT_OPTS="$JIT_OPTS -Djava.compiler=NONE"
fi
if [ $attach -eq 1 ]
then
	JIT_OPTS="$JIT_OPTS -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -Djava.compiler=NONE"
fi
if [ ! -z "$prof" ]
then
	JIT_OPTS="$JIT_OPTS -Xrunhprof:cpu=samples,depth=8,thread=y,file=$prof.$PRUN_CPU_RANK -Djava.compiler=NONE"
fi
if [ ! -z "$gprof" ]
then
	# JIT_OPTS="$JIT_OPTS -Xrunhprof:cpu=times,depth=8,thread=y,file=$gprof.$PRUN_CPU_RANK -Djava.compiler=NONE"
	JIT_OPTS="$JIT_OPTS -Xrunhprof:cpu=times,depth=8,thread=y,file=$gprof.$PRUN_CPU_RANK"
fi

wrapper_name="$IBIS_ROOT/bin/java_wrapper"

# Given a list, return the last element
function last_array_elt () {
	local last
	for h ; do last=$h ; done
	echo $last
}

# Given a list, return a list with the last element stripped
# bash cannot slice for you, so we use an intermediate array
# for the manipulations.
function strip_array () {
	local i=0
	local -a ARRAY
	for h ; do
		ARRAY[$i]=$h
		i=`expr $i + 1`
	done
	local RESULT="${ARRAY[0]}"
	for (( i = 1; i < $# - 1; i++ )) ; do
		RESULT="$RESULT ${ARRAY[$i]}"
	done
	echo "$RESULT"
}

i_am_nameserver=0
if [ $dedicated_nameserver -eq 1 ]
then
	# A dedicated nameserver is run on HOSTS[#HOSTS - 1]
	# The last entry in HOSTS and PRUN_HOSTNAMES is stripped.

	ns=`last_array_elt $HOSTS`
	# echo ns $ns
	Dns_server="-Dibis.name_server.host=$ns"

	NHOSTS=`expr $NHOSTS - 1`
	Dpool_total="-Dibis.pool.total_hosts=$NHOSTS"
	# echo Dpool_total $Dpool_total

	export HOSTS=`strip_array $HOSTS`
	Dpool_host_names="-Dibis.pool.host_names=\"$HOSTS\""
	# echo Dpool_host_names $Dpool_host_names

	export PRUN_HOSTNAMES=`strip_array $PRUN_HOSTNAMES`
	if  [ $PRUN_CPU_RANK -eq $NHOSTS ] ; then
	    i_am_nameserver=1
	fi
fi

# the -Xmx1024M must be here for the SUN JIT, it does not allocate enough mem for some satin apps --Rob

if [ $USE_JAVAWRAPPER -eq 1 ]
then
	$action="$action $wrapper_name -cpu $cpumask -cd $dir"
fi

if [ $i_am_nameserver -eq 1 ]
then
	echo Start run-once name server on `hostname`
	$action $JAVA_ROOT/bin/$JAVA_EXEC \
		-classpath $JAVACLASSPATH \
		ibis.impl.nameServer.tcp.NameServer -single
else
	# echo HOSTS '"'$HOSTS'"'
	# echo PRUN_HOSTNAMES '"'$PRUN_HOSTNAMES'"'
	$action $JAVA_ROOT/bin/$JAVA_EXEC \
		$JIT_OPTS -Xmx1024M \
		$Dlibpath $Dibislibs \
		$Dpool_host_num $Dpool_total $Dpool_host_names \
		$Dns_pool $Dns_port $Dns_server $Dns_retry \
		$Xbootclasspath \
		-classpath $JAVACLASSPATH \
		"$@"
fi
