package ibis.satin;

public class SatinObject {

	/** Wait until all spawned methods in the current method are finished. **/
	public void sync() {}

	/** Recursively abort all methods that were spawned by the current 
	    method and all methods spawned by the aborted methods.
	**/
	public void abort() {}

	/** Pause Satin operation. 
	    This method can optionally be called before a large sequential part in a program.
	    This will temporarily pause Satin's internal load distribution strategies to 
	    avoid communication overhead during sequential code.
	**/
	public static void pause() {
		Satin.pause();
	}

	/** Resume Satin operation. 
	    This method can optionally be called after a large sequential part in a program.
	**/
	public static void resume() {
		Satin.resume();
	}

	/** Returns whether it might be useful to spawn more methods.
	    If there is enough work in the system to keep all processors busy, this
	    method returns false.
	**/
	public static boolean needMoreJobs() {
		return Satin.needMoreJobs();
	}

	/** Returns whether the current method was generated by the machine it is running on.
	    methods can be distributed to remote machines by the Satin runtime system,
	    in which case this method returns false.
	 **/
	public static boolean localJob() {
		return Satin.localJob();
	}
}
