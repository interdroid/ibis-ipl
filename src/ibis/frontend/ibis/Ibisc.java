package ibis.frontend.ibis;

import com.ibm.jikesbt.*;   
import java.util.Vector;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.BufferedOutputStream;
import java.io.PrintStream;
import java.io.File;


class Ibisc {
	BT_Class c;
	boolean verbose;
	boolean satinVerbose;
	boolean iogenVerbose;
	boolean keep;
	boolean print;
	boolean invocationRecordCache;
	String javaFile;
	String className;
	String compiler = "javac";
	boolean supportAborts;
	boolean inletOpt;
	IbiscFactory factory;

	Ibisc(boolean verbose, boolean satinVerbose, boolean iogenVerbose, boolean keep, 
	      boolean print, boolean invocationRecordCache,
	       String javaFile, String compiler, boolean supportAborts, boolean inletOpt) {
		this.verbose = verbose;
		this.satinVerbose = satinVerbose;
		this.iogenVerbose = iogenVerbose;
		this.keep = keep;
		this.print = print;
		this.invocationRecordCache = invocationRecordCache;
		this.javaFile = javaFile;
		this.compiler = compiler;
		this.supportAborts = supportAborts;
		this.inletOpt = inletOpt;
	}

	void compile(String target) {
		try {
			String command = compiler + " " + target;
			if(verbose) {
				System.out.print("Running: " + command);
				System.out.flush();
			}
		
			Runtime r = Runtime.getRuntime();
			Process p = r.exec(command);
			int res = p.waitFor();
			if(res != 0) {
				System.err.println("Error compiling code (" + target + ").");
				System.exit(1);
			}
			if(verbose) {
				System.out.println(" Done");
			}
		} catch (Exception e) {
			System.err.println("IO error: " + e);
			e.printStackTrace();
			System.exit(1);
		}
	}

	boolean fileExists(String s) {
		File f = new File(s);
		return f.exists();
	}

	public void start() {
		if(!javaFile.endsWith(".java")) {
			javaFile = javaFile + ".java";
		}

		if(!fileExists(javaFile)) {
			System.err.println("File " + javaFile + " does not exist.");
			System.exit(1);
		}

		compile(javaFile);

		// We should have bytecode now.
		className = javaFile.substring(0, javaFile.length() - 5);
		if(verbose) {
			System.out.println("className = " + className);
		}

		factory = new IbiscFactory(className);
		BT_Factory.factory = factory;

		c = BT_Class.forName(className);

		// Run satinc over all loaded classes
		for (int i=0; i<factory.loadList.size(); i++) {
			if(verbose) {
				System.out.print("running satinc on " + factory.loadList.get(i));
				System.out.flush();
			}
			new ibis.frontend.satin.Satinc(satinVerbose, keep, print, invocationRecordCache, 
						       (String)factory.loadList.get(i), className, compiler, 
						       supportAborts, inletOpt, false).start();
			if(verbose) {
				System.out.println(" Done");
			}
		}

		String[] files = new String[factory.loadList.size()];
		for(int i=0; i<files.length; i++) {
			files[i] = (String)factory.loadList.get(i);
		}

		// Now generate serialization code for all classes, including the classes generated by satinc.
		if(verbose) {
			System.out.print("running io generator on all files");
			System.out.flush();
		}

		new ibis.frontend.io.IOGenerator(iogenVerbose, null, 0).scanClass(files, files.length);
		
		if(verbose) {
			System.out.println(" Done");
		}
	}

	public static void usage() {
		System.err.println("Usage : ibisc [-v] [-sv] [-iv] [-keep] [-print] [-irc-off] " +
				   "[-compiler \"your compile command\" ] [-no-aborts] [-no-inlet-opt] <Main.java>");
		System.exit(1);
	}

	public static void main(String[] args) {
		String target = null;
		boolean verbose = false;
		boolean keep = false;
		boolean print = false;
		boolean invocationRecordCache = true;
		boolean supportAborts = true;
		String compiler = "jikes";
		boolean inletOpt = true;
		boolean satinVerbose = false;
		boolean iogenVerbose = false;

		for(int i=0; i<args.length; i++) {
			if(args[i].equals("-v")) {
				verbose = true;
			} else if(args[i].equals("-sv")) {
				satinVerbose = true;
			} else if(args[i].equals("-iv")) {
				iogenVerbose = true;
			} else if(!args[i].startsWith("-")) {
				if(target == null) {
					target = args[i];
				} else {
					usage();
				}
			} else if(args[i].equals("-compiler")) {
				compiler = args[i+1];
				i++;
			} else if(args[i].equals("-keep")) {
				keep = true;
			} else if(args[i].equals("-print")) {
				print = true;
			} else if(args[i].equals("-irc-off")) {
				invocationRecordCache = false;
			} else if(args[i].equals("-no-aborts")) {
				supportAborts = false;
			} else if(args[i].equals("-no-inlet-opt")) {
				inletOpt = false;
			} else {
				usage();
			}
		}

		if(target == null) {
			usage();
		}

		new Ibisc(verbose, satinVerbose, iogenVerbose, keep, print, invocationRecordCache, 
			  target, compiler, supportAborts, inletOpt).start();
	}
}
