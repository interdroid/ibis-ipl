<project name="Ibis" default="build" basedir=".">
    <description>
	Build file for Ibis
    </description>

    <target name="build" description="Build Ibis" depends="clean,compile">
    </target>

    <property name="ibis" location="." />
    <property name="src" location="src" />
    <property name="tmp" location="tmp" />
    <property name="lib" location="lib" />
    <property name="external" location="external" />
    <property name="docs" location="docs" />
    <property name="rewritten-classlibs" location="classlibs" />

    <property name="version" value="ibis-2.0-pre" />

    <!-- import environment properties -->
    <property environment="env" />

    <path id="external.jars">
        <fileset dir="${external}">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="default.classpath">
        <fileset dir="${external}">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${lib}">
            <include name="*.jar" />
        </fileset>
        <pathelement path="${tmp}" />
    </path>

    <fileset dir="${external}">
        <include name="*.jar" />
    </fileset>

    <!--
    Compile ibis
    -->
    <target name="compile">
        <mkdir dir="${tmp}" />
        <mkdir dir="${lib}" />

        <!-- Compile the java code from ${src} into ${tmp} -->
        <javac srcdir="${src}" destdir="${tmp}" debug="on">
            <classpath refid="external.jars" />
        </javac>

        <!-- Run Rmic on Ibis -->
        <java classname="ibis.rmi.impl.frontend.Rmic" taskname="Rmic" failonerror="true" dir="${tmp}" maxmemory="512m" fork="true">
            <arg line="-dir ibis.rmi.registry.impl.RegistryImpl" />
            <classpath refid="default.classpath" />
        </java>
        <javac destdir="${tmp}" debug="true" srcdir="${tmp}" includes="ibis/rmi/registry/impl/*.java">
            <classpath refid="default.classpath" />
        </javac>

        <!-- Run Ibisc -->
        <java classname="ibis.frontend.Ibisc" taskname="Ibisc" failonerror="true" dir="${tmp}" maxmemory="512m" fork="true">
            <arg line="." />
            <classpath refid="default.classpath" />
        </java>

        <!-- Create jar files -->

        <jar destfile="lib/ipl.jar" basedir="${tmp}" includes="ibis/ipl/*.class">
        </jar>
        <jar destfile="lib/ipl-apps.jar" basedir="${tmp}" includes="ibis/ipl/apps/**/*.class">
        </jar>
        <jar destfile="lib/ipl-impl.jar" basedir="${tmp}" includes="ibis/ipl/impl/**/*.class ibis/util/**/*.class ibis/frontend/**/*.class">
            <manifest>
                <attribute name="Ibis-Service" value="ibis.ipl.impl.registry.central.Server" />
                <attribute name="Ibis-Implementation" value="ibis.ipl.impl.tcp.TcpIbis,ibis.ipl.impl.nio.NioIbis,ibis.ipl.impl.stacking.dummy.StackingIbis" />
                <attribute name="Ibisc-Component" value="ibis.util.io.rewriter.IOGenerator" />
            </manifest>
        </jar>
        <jar destfile="lib/satin-api.jar" basedir="${tmp}" includes="ibis/satin/*.class">
        </jar>
        <jar destfile="lib/satin-impl.jar" basedir="${tmp}" includes="ibis/satin/impl/**/*.class">
            <manifest>
                <attribute name="Ibisc-Component" value="ibis.satin.impl.rewriter.Satinc" />
            </manifest>
        </jar>
        <jar destfile="lib/gmi.jar" basedir="${tmp}" includes="ibis/gmi/**/*.class">
            <manifest>
                <attribute name="Ibisc-Component" value="ibis.gmi.frontend.Gmic" />
            </manifest>
        </jar>
        <jar destfile="lib/rmi.jar" basedir="${tmp}" includes="ibis/rmi/**/*.class">
            <manifest>
                <attribute name="Ibisc-Component" value="ibis.rmi.impl.frontend.Rmic" />
            </manifest>
        </jar>
        <jar destfile="lib/mpj.jar" basedir="${tmp}" includes="ibis/mpj/**/*.class">
        </jar>

        <!-- Copy external libraries to lib directory -->
        <copy todir="${lib}">
            <fileset dir="${external}" />
        </copy>

        <delete dir="${tmp}" />
    </target>

    <!--
       Clean up everything except the rewritten classlibs
    -->
    <target name="clean" description="Clean up (leaves rewritten classlibs)">
        <delete dir="${tmp}" />
        <delete dir="${lib}" />

        <delete dir="ant-tasks/tasks" />
        <delete file="${version}.zip" />
        <delete file="ibis-src.zip" />
        <ant dir="${docs}" inheritAll="false" target="clean" />
    </target>

    <target name="rewrite" depends="build" description="Preprocess all serializable classes of standard Java">
        <!-- Create a directory for the rewritten classes -->

        <mkdir dir="${rewritten-classlibs}" />

        <!-- Then, find and extract jars.  -->
        <unjar dest="${rewritten-classlibs}">
            <patternset>
                <include name="**/*.class" />
            </patternset>
            <fileset dir="${env.JAVA_HOME}/jre/lib">
                <include name="**/*.jar" />
            </fileset>
        </unjar>

        <!-- Then, rewrite.  -->
        <java classname="ibis.frontend.Ibisc" taskname="Ibisc" failonerror="true" maxmemory="512m" dir="${rewritten-classlibs}" fork="true">
            <arg line="." />
            <classpath refid="default.classpath" />
        </java>
    </target>



    <target name="rewritten-clean" description="Clean up rewritten classlibs (except under sym links)">
        <!--
	If ${rewritten-classlibs} is a sym-link, we let the directory
	live on. In this case, I suppose the user knows what he is up to.
	If it isn't a symlink (which is the normal case) go ahead and
	throw away all your rewritten stuff.	RFHH
	-->
        <delete includeEmptyDirs="true">
            <fileset dir="${ibis}" followsymlinks="false">
                <include name="classlibs/**" />
            </fileset>
        </delete>
    </target>

    <target name="docs" description="Build the Ibis API documentation">
        <ant dir="${docs}" inheritAll="false" target="api" />
    </target>

    <target name="developer-docs">
        <ant dir="${docs}" inheritAll="false" target="developer-api" />
    </target>

    <target name="progman" description="Build the Ibis programmers manual">
        <ant dir="${docs}" inheritAll="false" target="progman" />
    </target>

    <target name="test" depends="build">
        <ant dir="${src}/ibis/ipl/apps/example" antfile="${ibis}/build-files/apps/build-ibis-app.xml" target="test-par">
            <property name="test-par-run" value="ibis.ipl.apps.example.Example" />
        </ant>
    </target>

    <target name="ibis.zip" depends="build">
        <delete file="${version}.zip" />

        <zip destfile="ibis-src.zip">
            <zipfileset dir="src" includes="**/*.java" prefix="ibis-src" />
        </zip>

        <zip destfile="${version}.zip">
            <zipfileset dir="." prefix="${version}" includes="build-files/**,docs/**,grun/**,lib/**,notices/**,
		BUGS.txt,LICENSE.txt,ibis-src.zip" excludes="docs/src/**,notices/OmniSourceLicense.html,
		docs/build.xml,docs/README-bin.txt" />
            <zipfileset dir="." prefix="${version}" filemode="755" includes="bin/**" />
            <zipfileset dir="." includes="docs/README-bin.txt" fullpath="${version}/README.txt" />
        </zip>

    </target>

</project>
