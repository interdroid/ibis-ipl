# -------------- start of user configuration -----------------------------

# When using javac or jikes, set these values correctly and use "make"
# or "make java". (Also make sure that your CLASSPATH is set correctly).     

.PHONY:		manta
.PHONY:		java

# default:	manta
default:	java

PROFILE		= 0
OPTIMIZE	= 1

MYRINET_ROOT    = /usr/local/package/myrinet/lib/intel_linux

# -------------- end of build time configuration ----------------------------

PANDA		= @PANDA_ROOT@
PANDA_NETWORK	= @PANDA_NETWORK@
DAS		= @DAS_LIB@
JPATH           = @JAVA_ROOT@
export JPATH
JAVAC           = @JAVAC@
JIKES_BT	= @JIKES_BT_ROOT@
ifndef IBIS_ROOT
IBIS_ROOT	= @IBIS_ROOT@
endif
LFC_ROOT	= @LFC_ROOT@
GM_ROOT		= @GM_ROOT@

# -------------- end of configure time configuration ------------------------

JAVAC_COMMAND   = $(JAVAC) $(JAVACFLAGS) $(JAVAOPTFLAGS)
JAVAH_COMMAND   = $(JPATH)/bin/javah $(JAVAHFLAGS)
JAVACLASSPATH	= .:$(IBIS_ROOT)/ibis/classlibs:$(IBIS_ROOT):$(IBIS_ROOT)/ibis:$(JPATH)/jre/lib/rt.jar:$(JIKES_BT)/jikesBT
JAVABOOTCLASSPATH = $(IBIS_ROOT)/ibis/classlibs:$(IBIS_ROOT)/ibis
JAVABOOTLIBPATH = -Dsun.boot.library.path=$(IBIS_ROOT)/ibis/lib:$(JPATH)/jre/bin:$(JPATH)/jre/lib/i386
JAVACFLAGS	+= -g -classpath $(JAVACLASSPATH)
JAVAHFLAGS      += -classpath $(JAVACLASSPATH)
CLASSPATH	= $(JAVACLASSPATH)
export CLASSPATH

LD_LIBRARY_PATH	= $(IBIS_ROOT)/ibis/lib
export LD_LIBRARY_PATH

LD_ASSUME_KERNEL	= 2.2.5
export LD_ASSUME_KERNEL

IBERTY	        = $(MYRINET_ROOT)/libiberty.a
BFD		= $(MYRINET_ROOT)/libbfd.a
LANAIDEVICE	= $(MYRINET_ROOT)/libLanaiDevice.a
DPI		= $(MYRINET_ROOT)/libDpi.a
ENS		= /usr/proj/FastSockets/enameserver/enameserver-0.13/libens.a
ifeq ($(OPTIMIZE), 1)
LFC	        = $(LFC_ROOT)/lib/optimized/liblfc.a
PANDA_LIB	= $(PANDA)/panda4.0/lib/i386_linux/$(PANDA_NETWORK)/no_threads/optimized/libpanda.a
else
LFC	        = $(LFC_ROOT)/lib/debug/liblfc.a
PANDA_LIB	= $(PANDA)/panda4.0/lib/i386_linux/$(PANDA_NETWORK)/no_threads/libpanda.a
endif
GM		= $(GM_ROOT)/lib/libgm.a
DASLIB		= /usr/local/VU/daslib

GROUPC_COMMAND	= $(JPATH)/bin/java -classpath $(JAVACLASSPATH) ibis.frontend.group.Main

GROUP_FILES	= $(SRC:%.java=%.gjava)
CLASS_FILES	= $(SRC:%.java=%.class) $(INNER_CLASS)
MAIN_CLASS	= $(MAIN:%.java=%.class)
MAIN_CLASS_NAME	= $(MAIN:%.java=%)

LDSO	= gcc -shared

SATINC_COMMAND = $(JPATH)/bin/java -classpath $(JAVACLASSPATH) ibis.frontend.satin.Satinc -keep -compiler "$(JAVAC) -g -classpath $(JAVACLASSPATH)"

IOC_COMMAND = $(JPATH)/bin/java -classpath $(JAVACLASSPATH) ibis.frontend.io.IOGenerator

IBISC_COMMAND = $(JPATH)/bin/java -classpath $(JAVACLASSPATH) ibis.frontend.ibis.Ibisc -compiler  "$(JAVAC) -g -classpath $(JAVACLASSPATH)" -mantac "$(MANTAC_COMMAND)"


# When using Manta, set these values correctly and use "make manta"

ifeq (, $(PANDA_NETWORK))
PANDA_NETWORK	= udp
endif

CFLAGS		=
MANTACFLAGS	=

ifeq ($(OPTIMIZE), 1)
CFLAGS		+= -O3 -DNDEBUG
else
MANTACFLAGS	+= -no-opt-comm
MANTACFLAGS	+= -no-inline -g
endif
ifeq ($(PROFILE), 1)
CFLAGS		+= -pg
# CFLAGS		+= -fno-inline-functions
MANTACFLAGS	+= -pg
endif

ifeq (,$(PACKAGE))
PACKAGEDOT	:= ""
else
PACKAGEDOT	:= $(PACKAGE).
PACKAGE_SLASH	:= $(subst .,/,$(PACKAGE))
PACKAGE_MANGLE	:= $(subst .,_,$(PACKAGE))
endif

LASM_CACHE	:= $(IBIS_ROOT)/ibis/LASM_IBIS_CACHE

MANTA	= @MANTA_ROOT@
export MANTA
MANTACLASSPATH	= .:$(IBIS_ROOT):$(IBIS_ROOT)/ibis:$(MANTA)/javalibs

MANTACFLAGS	+= -classpath $(MANTACLASSPATH)
MANTACFLAGS	+= -g
MANTACFLAGS	+= -no-shared-link
MANTACFLAGS	+= -panda $(PANDA)/panda4.0
ifeq (, $(OUT))	# Is this what we want???? No apps stuff exported... RFHH
MANTACFLAGS	+= -output_cc $(LASM_CACHE)
endif
MANTACFLAGS	+= -user_cc $(LASM_CACHE)
ifeq (lfc, $(PANDA_NETWORK))
MANTACFLAGS	+= -myrinet
endif
MANTAC_COMMAND = $(MANTA)/mantac $(MANTACFLAGS)

SRC		+= $(REMOTE)
SRC		+= $(REMOTE:%.java=rmi_skeleton_%.java)
SRC		+= $(REMOTE:%.java=rmi_stub_%.java)

ifneq (, $(strip $(SERIALIZABLE)))
SERIALIZABLE_O	:= $(SERIALIZABLE:%.java=%.o)
# O_FILES		:= $(filter-out $(SERIALIZABLE_O), $(O_FILES))
O_FILES		+= $(SERIALIZABLE_O:%.o=%_ibis_io_Generator.o)

SERIALIZABLE_CLASS	:= $(SERIALIZABLE:%.java=%.class)
SERIALIZABLE_GENERATED	:= $(SERIALIZABLE:%.java=%_ibis_io_Generator.class)
CLASS_FILES	+= $(SERIALIZABLE_GENERATED)
endif

O_FILES		:= $(CLASS_FILES:%.class=%.o)

ifeq (ibis., $(findstring ibis.,$(PACKAGE)))
PKG_SUF		:= .$(PACKAGE_MANGLE)
else
PKG_SUF		:= .o
endif
PKG_O_FILES	:= $(O_FILES:%.o=%$(PKG_SUF))
PKG_O_DOLLAR	:= $(subst $$,\$$,$(PKG_O_FILES))

MANTA_LIB	= $(IBIS_ROOT)/ibis/lib/libibis.a
MANTA_SO	= $(MANTA_LIB:%.a=%.so)
MANTA_LDLIBS	= $(MANTA_LIB)

ifeq (gm, $(MPI_MODE))
    MPI		= /usr/local/mpich/mpich-gm
else
    ifeq (panda, $(MPI_MODE))
	MPI		= /home/rutger/mpich/mpich-panda/mpich/mpich
    else
	ifeq (p4, $(MPI_MODE))
	    MPI		= /usr/local/mpich/1.2.4/ch_p4
	    # MPI		= /home/rutger/mpich/mpich-1.2.4..8a
	endif
    endif
endif

ifeq (mpi, $(MP_MODE))
    MANTA_LDLIBS	+= $(IBIS_ROOT)/ibis/lib/libibis_mp_mpi.a
    ifeq (gm, $(MPI_MODE))
	MANTA_LDLIBS	+= -L$(MPI)/lib -lmpich
	MANTA_LDLIBS	+= $(GM)
	MANTA_LDLIBS	+= -lpthread
	MANTACFLAGS	:= $(filter-out -myrinet, $(MANTACFLAGS))
    else
	ifeq (panda, $(MPI_MODE))
	    ifeq (1, $(OPTIMIZE))
		MANTA_LDLIBS	+= $(MPI)/lib/i386/ch_panda4/optimized/libmpi.a
	    else
		MANTA_LDLIBS	+= $(MPI)/lib/i386/ch_panda4/libmpi.a
	    endif
	else
	    ifeq (p4, $(MPI_MODE))
		MANTA_LDLIBS	+= -L$(MPI)/lib -lmpich
		MANTA_LDLIBS	+= -lpthread
		MANTACFLAGS	:= $(filter-out -myrinet, $(MANTACFLAGS))
	    else
		@@@#$$$$$$$$$$$$$$
	    endif
	endif
    endif
else
    MANTA_LDLIBS	+= $(IBIS_ROOT)/ibis/lib/libibis_mp_panda.a
endif

#JACKAL_PATCHERS	=
#JACKAL_PATCHERS	+= $(SRC:%.java=diff_patch_%.c)
#JACKAL_PATCHERS	+= $(MAIN:%.java=diff_patch_%.c)
#JACKAL_PATCHERS	+= $(SERIALIZE:%.java=diff_patch_%.c)

TRASH_FILES  =  
TRASH_FILES += *core 
TRASH_FILES += *.o
TRASH_FILES += stub_*.h
TRASH_FILES += packagers_*.c
TRASH_FILES += packagers_*.h
TRASH_FILES += *.jac
TRASH_FILES += *~
TRASH_FILES += *.s
TRASH_FILES += *.class
TRASH_FILES += *.lasm
TRASH_FILES += *.d
TRASH_FILES += Satin_*_InvocationRecord.java
TRASH_FILES += Satin_*_ReturnRecord.java
TRASH_FILES += -r LASM_CACHE
TRASH_FILES += Satin_*
TRASH_FILES += *.jad
TRASH_FILES += $(PKG_O_FILES) $(PKG_O_DOLLAR)

#conversion rules

.SUFFIXES:
.SUFFIXES:      .o .class .java .c $(PKG_SUF) _ibis_io_Generator.class


# Rules and targets for java (and Manta) compilation
#

.java.class:
	$(JAVAC_COMMAND) $*.java


.class_ibis_io_Generator.class:
	$(IOC_COMMAND) $(PACKAGEDOT)$*

rmi_stub_%.java:	%.class
	$(JPATH)/bin/java -classpath $(CLASSPATH) ibis.frontend.rmi.Main -v $*

rmi_skeleton_%.java:	%.class
	$(JPATH)/bin/java -classpath $(CLASSPATH) ibis.frontend.rmi.Main -v $*


ifneq (, $(strip $(SERIALIZABLE)))
.PHONY: serializers
serializers:	$(SERIALIZABLE_CLASS)
serializers:	$(SERIALIZABLE_GENERATED)
serializers:	$(REMOTE:%.java=rmi_stub_%.java)
serializers:	$(REMOTE:%.java=rmi_skeleton_%.java)
endif


java:	class_files

.PHONY:	class_files
class_files:
ifneq (, $(strip $(SERIALIZABLE)))
	$(MAKE) $(MFLAGS) serializers
endif
ifneq (, $(strip $(CLASS_FILES) $(MAIN_CLASS)))
	$(MAKE) $(MFLAGS) $(CLASS_FILES) $(MAIN_CLASS)
endif



# Rules and targets for Manta compilation
#

.class.o:
	$(MANTAC_COMMAND) -c $(subst $$,\$$,$*.class)

.o$(PKG_SUF):
	cp $(subst $$,\$$,$*.o) $(subst $$,\$$,$@)


manta:	$(LASM_CACHE)

manta:	manta_local

# Compile the files in the current directory; first make class files and
# serializers, then invoke mantac
#
.PHONY:	manta_local
manta_local:
	@echo Make class files and serializers
	$(MAKE) $(MFLAGS) BUILD_MANTA=1 class_files
ifneq (, $(strip $(C_SRC)))
	@echo Now make manta:.h files for native
	$(MAKE) $(MFLAGS) BUILD_MANTA=1 h_files
endif
ifeq (,$(PACKAGE))
ifneq (, $(OUT))
	@echo Now make manta:out $(OUT)
	$(MAKE) $(MFLAGS) BUILD_MANTA=1 $(OUT)
endif
else
	@echo Now make manta:manta_lib
	$(MAKE) $(MFLAGS) BUILD_MANTA=1 manta_lib
endif


# Invoke mantac on the class files
#
.PHONY:	manta_lib
manta_lib:	$(PKG_O_FILES) $(C_OBJ)
	$(AR) ru $(MANTA_LIB) $(PKG_O_DOLLAR) $(C_OBJ)


$(LASM_CACHE):
	-mkdir -p $@


# A link-only target is a much-used feature in making/debugging applications
#
link:
	$(MANTAC_COMMAND) -link-only \
		-o $(OUT) \
		$(MAIN:%.java=%.o) \
		$(O_FILES) \
		$(MANTA_LDLIBS)

$(OUT): $(MAIN_CLASS) $(O_FILES) $(MANTA_LIB)
	echo O_FILES = $(O_FILES)
	$(MANTAC_COMMAND) -o $@ $(MAIN_CLASS) $(O_FILES) $(MANTA_LDLIBS)


.PHONY:	run
run:
	$(JPATH)/bin/java $(JAVACFLAGS) $(MAIN:%.java=%)

# Print a feasible prun command; mouse this into your command line
#
.PHONY:	prun
prun:
	@echo "prun IBP_SEND_SYNC=100 LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):. MANTA_NO_PANDA=1 PAN_COMM_NO_INTR=1 CLASSPATH=$(CLASSPATH) -no-panda $(JPATH)/bin/java 'hosts' $(JAVACFLAGS) $(MAIN:%.java=%) 'args ...'"
