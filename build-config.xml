<project
    name="build-config"
    default="configure"
    basedir=".">

    <description>
      Install-time configuration.
      Figure out where the packages are that we depend on.
    </description>

    <target name="config.previous"
	    depends="config-set-os"
	    if="config.has-previous">
	<echo message="Read previous configuration from build-properties.cache"/>
	<property file="build-properties.cache"/>
    </target>

    <target name="config.das"
	    depends="config-set-os"
	    if="config.is-das">
	<property
		name="default.home.panda"
		location="/usr/local/VU/panda/panda4.0"/>
	<property
		name="default.home.daslib"
		location="/usr/local/VU/daslib"/>
	<property
		name="default.home.lfc"
		location="/usr/local/VU/lfc/lfc-gm"/>
	<property
		name="default.home.mpi"
		location="/usr/local/mpich/mpich-gm"/>
	<property
		name="default.home.gm"
		location="/usr/local/gm/current"/>
    </target>

    <target name="config.workstation"
	    depends="config-set-os"
	    if="config.is-workstation">
	<property
		name="default.home.panda"
		location="../panda/panda4.0"/>
	<property
		name="default.home.daslib"
		location="../daslib"/>
	<property
		name="default.home.lfc"
		location="../lfc-gm"/>
	<property
		name="default.home.mpi"
		location="/usr/local/mpich/mpich-gm"/>
	<property
		name="default.home.gm"
		location="../GM"/>
    </target>

    <target name="config.mac"
	    depends="config-set-os"
	    if="config.os-is-mac">
	<echo message="Yep, this is a mac"/>
    </target>

    <target name="config-domainname" depends="proprietary-tasks">
	<hostname hostname="hostname" domainname="domainname"/>
	<echo message="Hostname ${hostname} domainname ${domainname}"/>
	<condition property="config.has-previous">
	    <available file="build-properties.cache"/>
	</condition>
	<condition property="config.is-das">
	    <and>
		<not>
		    <isset property="config.has-previous"/>
		</not>
		<or>
		    <equals arg1="${domainname}" arg2="das2.cs.vu.nl"/>
		    <!-- <equals arg1="${domainname}" arg2="cs.vu.nl"/> -->
		    <equals arg1="${domainname}" arg2="das2.liacs.nl"/>
		    <equals arg1="${domainname}" arg2="das2.nikhef.nl"/>
		    <equals arg1="${domainname}" arg2="das2.its.tudelft.nl"/>
		    <equals arg1="${domainname}" arg2="das2.phys.uu.nl"/>

		    <!-- Dunno why but the VU DAS workstations are not in
			 the DAS domain -->
		    <equals arg1="${hostname}" arg2="mercury.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="titan.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="venus.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="mars.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="drum.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="kog.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="swpc429.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc060.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc061.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc062.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc063.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc064.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc065.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc066.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc067.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc068.cs.vu.nl"/>
		    <equals arg1="${hostname}" arg2="fspc069.cs.vu.nl"/>
		</or>
	    </and>
	</condition>
	<condition property="config.is-workstation">
	    <and>
		<not>
		    <isset property="config.has-previous"/>
		</not>
		<not>
		    <isset property="config.is-das"/>
		</not>
	    </and>
	</condition>
	<echo message="config.is-das = ${config.is-das}"/>
    </target>

    <target name="config-set-os" depends="config-domainname">
	<condition property="config.os-is-unix"    value="true">
	    <os family="unix"/>
	</condition>
	<condition property="config.os-is-windows" value="true">
	    <os family="windows"/>
	</condition>
	<condition property="config.os-is-mac"     value="true">
	    <os family="mac"/>
	</condition>
    </target>

    <target name="config-init"
	    depends="config.das,config.workstation,config.mac,config.previous">
	<property name="JAVA_HOME_ENV" value="${env.JAVA_HOME}"/>
    </target>

    <target name="compile.java_wrapper">
	<echo message="Now compile this java_wrapper"/>
	<cc	outfile="${ibis}/bin/java_wrapper"
		outtype="executable">
	    <fileset dir="${ibis}/src/ibis/util">
		<include name="java_wrapper.c"/>
	    </fileset>
	</cc>
	<echo message="Now compile this getpid"/>
	<cc	outfile="${ibis}/bin/getpid"
		outtype="executable">
	    <fileset dir="${ibis}/src/ibis/util">
		<include name="getpid.c"/>
	    </fileset>
	</cc>
    </target>

    <target name="java_wrapper" depends="config-domainname" if="config.is-das">
	<ant target="compile.java_wrapper" inheritAll="false">
	    <property name="ibis" value="${ibis}"/>
	</ant>
    </target>

    <property environment="env"/>

    <property name="ant.home" location="3rdparty/apache-ant-1.6.1"/>

    <property name="karmi" location="${ibis}/../karmi/karmi-transport-1.07g"/>

    <target name="-config-build-properties">
	<if>
	    <isset property="called-from-configure"/>
	    <then>
	    </then>
	    <else>
		<echo>
----------------------------------------------------------------
Now, your Ibis build is being configured under ${ibis}.

If you don't have any fast local networks for which a special
Ibis module is required, you may skip the following message
by just hitting the 'enter' key.

If you wish to configure Ibis modules for fast local networks,
you have to do some extra configuration. To do so, type:
  ant configure
to the command line, and answer questions.
If you don't know the answer, or don't have the native modules
that the fast local network module depends on, just hitting
the 'enter' key is usually OK.
After you did this optional configuration, you must again type:
  ant
to the command line.
----------------------------------------------------------------
</echo>
		<input
			message="Hit the 'enter' key to continue"
			addproperty="answer.config.continue"/>
	    </else>
	</if>

	<property name="config.home.ibis" location="${ibis}"/>

	<condition property="config.home.gm-s" value="${default.home.gm}">
	    <equals arg1="${install.home.gm}" arg2=""/>
	</condition>
	<condition property="config.home.gm-s" value="${install.home.gm}">
	    <not>
		<equals arg1="${install.home.gm}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.gm"
		location="${config.home.gm-s}"/>

	<condition property="config.home.daslib-s" value="${default.home.daslib}">
	    <equals arg1="${install.home.daslib}" arg2=""/>
	</condition>
	<condition property="config.home.daslib-s" value="${install.home.daslib}">
	    <not>
		<equals arg1="${install.home.daslib}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.daslib"
		location="${config.home.daslib-s}"/>

	<condition property="config.home.lfc-s" value="${default.home.lfc}">
	    <equals arg1="${install.home.lfc}" arg2=""/>
	</condition>
	<condition property="config.home.lfc-s" value="${install.home.lfc}">
	    <not>
		<equals arg1="${install.home.lfc}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.lfc"
		location="${config.home.lfc-s}"/>

	<condition property="config.home.panda-s" value="${default.home.panda}">
	    <equals arg1="${install.home.panda}" arg2=""/>
	</condition>
	<condition property="config.home.panda-s" value="${install.home.panda}">
	    <not>
		<equals arg1="${install.home.panda}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.panda"
		location="${config.home.panda-s}"/>

	<condition property="config.home.mpi-s" value="${default.home.mpi}">
	    <equals arg1="${install.home.mpi}" arg2=""/>
	</condition>
	<condition property="config.home.mpi-s" value="${install.home.mpi}">
	    <not>
		<equals arg1="${install.home.mpi}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.mpi"
		location="${config.home.mpi-s}"/>

	<delete file="build-properties.cache"/>
	<echo	file="build-properties.cache"
		append="true">default.home.panda  = ${default.home.panda}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.daslib = ${default.home.daslib}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.lfc    = ${default.home.lfc}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.mpi    = ${default.home.mpi}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.gm     = ${default.home.gm}
</echo>
	<if>
	    <isset property="config.is-das"/>
	    <then>
		<echo	file="build-properties.cache"
			append="true">config.is-das          = true
</echo>
	    </then>
	</if>
	<replace
		file="${ibis}/build-properties.cache"
		token="${file.separator}"
		value="/"/>

	<copy	file="${ibis}/build-properties"
		tofile="${ibis}/build-properties.backup"
		failonerror="false"
		overwrite="true">
	</copy>
	<copy	file="${ibis}/src/scripts/build-properties.in"
		tofile="${ibis}/build-properties"
		overwrite="true">
	</copy>

	<replace
		file="${ibis}/build-properties"
		token="@JAVA@"
		value="${JAVA_HOME_ENV}"/>
	<replace
		file="${ibis}/build-properties"
		token="@IBIS@"
		value="${config.home.ibis}"/>
	<replace
		file="${ibis}/build-properties"
		token="@GM_HOME@"
		value="${config.home.gm}"/>
	<replace
		file="${ibis}/build-properties"
		token="@DASLIB_HOME@"
		value="${config.home.daslib}"/>
	<replace
		file="${ibis}/build-properties"
		token="@LFC_HOME@"
		value="${config.home.lfc}"/>
	<replace
		file="${ibis}/build-properties"
		token="@PANDA_HOME@"
		value="${config.home.panda}"/>
	<replace
		file="${ibis}/build-properties"
		token="@MPI_HOME@"
		value="${config.home.mpi}"/>
	<replace
		file="${ibis}/build-properties"
		token="@KARMI@"
		value="${karmi}"/>
	<replace
		file="${ibis}/build-properties"
		token="${file.separator}"
		value="/"/>
	<if>
	    <isset property="config.is-das"/>
	    <then>
		<echo	file="build-properties"
			append="true">config.is-das          = true
</echo>
	    </then>
	</if>

	<!--
	==============================================================
	    Generate configuration.sh
	-->

	<condition property="JIT_OPTS" value="${env.JIT_OPTS}">
	    <isset property="env.JIT_OPTS"/>
	</condition>
	<condition property="JIT_OPTS" value="">
	    <not>
		<isset property="env.JIT_OPTS"/>
	    </not>
	</condition>

	<property name="config.javac" location="${JAVA_HOME_ENV}/bin/javac"/>

	<echo
		file="${ibis}/configuration.sh">#!/bin/bash
# Shell variables to describe Ibis configuration
JAVA_ROOT=${JAVA_HOME_ENV}
# JAVA_ROOT=/usr/local/ibm-java/IBMJava2-141
# JAVA_ROOT=/usr/local/sun-java/jdk1.4
# JAVA_ROOT=/usr/local/sun-java/j2sdk1.5.0
JAVAC=${config.javac}
JIT_OPTS="${JIT_OPTS}"
IBIS_ROOT=${ibis}
MANTA_ROOT=/usr/local/VU/manta
BCEL=${package.home.bcel}
KARMI=${karmi}
</echo>

	<echo
		file="${ibis}/configuration.bat">@rem Windows cmd variables to describe Ibis configuration
@set JAVA_ROOT=${JAVA_HOME_ENV}
@rem JAVA_ROOT=/usr/local/ibm-java/IBMJava2-141
@rem JAVA_ROOT=/usr/local/sun-java/jdk1.4
@rem JAVA_ROOT=/usr/local/sun-java/j2sdk1.5.0
@set JAVAC=${config.javac}
@set JIT_OPTS=${JIT_OPTS}
@set IBIS_ROOT=${ibis}
@set MANTA_ROOT=/usr/local/VU/manta
@set BCEL=${package.home.bcel}
@set KARMI=${karmi}
</echo>

	<!-- Concat the stuff in src/scripts to the bin directory -->
	<mkdir dir="${ibis}/bin"/>

	<concat destfile="${ibis}/bin/ibisc">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/ibisc" />
	</concat>
	<chmod file="${ibis}/bin/ibisc" perm="+x"/>

	<concat destfile="${ibis}/bin/io_gen">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/io_gen" />
	</concat>
	<chmod file="${ibis}/bin/io_gen" perm="+x"/>

	<concat destfile="${ibis}/bin/ibis_nameserver">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/ibis_nameserver" />
	</concat>
	<chmod file="${ibis}/bin/ibis_nameserver" perm="+x"/>

	<concat destfile="${ibis}/bin/ibis_controlhub">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/ibis_controlhub" />
	</concat>
	<chmod file="${ibis}/bin/ibis_controlhub" perm="+x"/>

	<concat destfile="${ibis}/bin/jdis">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/jdis" />
	</concat>
	<chmod file="${ibis}/bin/jdis" perm="+x"/>

	<concat destfile="${ibis}/bin/ant">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/ant" />
	</concat>
	<chmod file="${ibis}/bin/ant" perm="+x"/>

	<concat destfile="${ibis}/bin/jp">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/jp" />
	</concat>
	<if>
	    <os family="mac"/>
	    <then>
		<replace file="${ibis}/bin/jp" token="JAVA_ROOT/bin" value="JAVA_ROOT/Commands"/>
	    </then>
	</if>
	<chmod file="${ibis}/bin/jp" perm="+x"/>

	<concat destfile="${ibis}/bin/satinc">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/satinc" />
	</concat>
	<chmod file="${ibis}/bin/satinc" perm="+x"/>

	<if>
	    <available file="src/scripts/run_ibis"/>
	    <then>
		<concat destfile="${ibis}/bin/run_ibis">
		    <filelist dir="${ibis}" files="configuration.sh,src/scripts/run_ibis" />
		</concat>
		<if>
		    <os family="mac"/>
		    <then>
			<replace file="${ibis}/bin/run_ibis" token="JAVA_ROOT/bin" value="JAVA_ROOT/Commands"/>
		    </then>
		</if>
		<chmod file="${ibis}/bin/run_ibis" perm="+x"/>
	    </then>
	</if>

	<concat destfile="${ibis}/bin/extract_jars">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/extract_jars" />
	</concat>
	<chmod file="${ibis}/bin/extract_jars" perm="+x"/>

	<concat destfile="${ibis}/bin/tree_ioc">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/tree_ioc" />
	</concat>
	<chmod file="${ibis}/bin/tree_ioc" perm="+x"/>

	<if>
	    <available file="src/scripts/run_ibis_wide_area"/>
	    <then>
		<concat destfile="${ibis}/bin/run_ibis_wide_area">
		    <filelist dir="${ibis}" files="configuration.sh,src/scripts/run_ibis_wide_area" />
		</concat>
		<chmod file="${ibis}/bin/run_ibis_wide_area" perm="+x"/>
	    </then>
	</if>

	<!--
	    Right for now, this is used only by me = RFHH so I choose values
	    for ibis NS port and host that are sensible to *me*. This might
	    become a configuration thingy whenever other peope also want to
	    use run-das
	-->
	<if>
	    <available file="src/scripts/run-das"/>
	    <then>
		<concat destfile="${ibis}/bin/run-das">
		    <filelist dir="${ibis}" files="configuration.sh,src/scripts/run-das" />
		</concat>
		<if>
		    <os family="mac"/>
		    <then>
			<replace file="${ibis}/bin/run-das" token="JAVA_ROOT/bin" value="JAVA_ROOT/Commands"/>
		    </then>
		</if>
		<chmod file="${ibis}/bin/run-das" perm="+x"/>
	    </then>
	</if>

	<concat destfile="${ibis}/bin/run-ibis">
	    <filelist dir="${ibis}" files="configuration.sh,src/scripts/run-ibis" />
	</concat>
	<if>
	    <os family="mac"/>
	    <then>
		<replace file="${ibis}/bin/run-ibis" token="JAVA_ROOT/bin" value="JAVA_ROOT/Commands"/>
	    </then>
	</if>
	<chmod file="${ibis}/bin/run-ibis" perm="+x"/>

	<copy
		file="${ibis}/src/scripts/ns-env.in"
		tofile="${ibis}/bin/ns-env"/>
	<replace file="${ibis}/bin/ns-env" token="@IBIS_NS_PORT@" value="9826"/>
	<replace file="${ibis}/bin/ns-env" token="@IBIS_NS_HOST@" value="${hostname}"/>
	<chmod file="${ibis}/bin/ns-env" perm="+x"/>

	<copy
		file="${ibis}/bin/ns-env"
		tofile="${ibis}/bin/ns-env.bat">
	</copy>
	<replaceregexp
	    file="${ibis}/bin/ns-env.bat"
		flags="g"
		match="export (.*)="
		replace="set \1="/>
	<replace
	    file="${ibis}/bin/ns-env.bat"
		token="#"
		value="rem "/>

	<if>
	    <available file="src/scripts/cluster_wrapper.in"/>
	    <then>
		<copy
			overwrite="true"
			file="${ibis}/src/scripts/cluster_wrapper.in"
			tofile="${ibis}/bin/cluster_wrapper">
		    <filterchain>
			<filterreader
				classname="org.apache.tools.ant.filters.ReplaceTokens">
			    <param  type="token"
				    name="IBIS_INSTALL_PATH"
				    value="${ibis}"/>
			    <param  type="token"
				    name="JAVA"
				    value="${JAVA_HOME_ENV}"/>
			</filterreader>
		    </filterchain>
		</copy>
		<replace
			file="${ibis}/bin/cluster_wrapper"
			token="${file.separator}"
			value="/"/>
		<chmod file="${ibis}/bin/cluster_wrapper" perm="+x"/>
	    </then>
	</if>

	<if>
	    <available file="src/scripts/csim_run_ibis"/>
	    <then>
		<concat destfile="${ibis}/bin/csim_run_ibis">
		    <filelist dir="${ibis}" files="configuration.sh,src/scripts/csim_run_ibis" />
		</concat>
		<chmod file="${ibis}/bin/csim_run_ibis" perm="+x"/>
	    </then>
	</if>

	<if>
	    <available file="src/scripts/csim_run_ibis_tcp"/>
	    <then>
		<concat destfile="${ibis}/bin/csim_run_ibis_tcp">
		    <filelist dir="${ibis}" files="configuration.sh,src/scripts/csim_run_ibis_tcp" />
		</concat>
		<chmod file="${ibis}/bin/csim_run_ibis_tcp" perm="+x"/>
	    </then>
	</if>

	<if>
	    <available file="src/scripts/run_ibis.bat"/>
	    <then>
		<concat destfile="${ibis}/bin/run_ibis.bat">
		    <filelist dir="${ibis}" files="configuration.bat,src/scripts/run_ibis.bat" />
		</concat>
		<chmod file="${ibis}/bin/run_ibis.bat" perm="+x"/>
	    </then>
	</if>

	<concat destfile="${ibis}/bin/run-ibis.bat">
	    <filelist dir="${ibis}" files="configuration.bat,src/scripts/run-ibis.bat" />
	</concat>
	<chmod file="${ibis}/bin/run-ibis.bat" perm="+x"/>

	<concat destfile="${ibis}/bin/ant.bat">
	    <filelist dir="${ibis}" files="configuration.bat,src/scripts/ant.bat" />
	</concat>
	<chmod file="${ibis}/bin/ant.bat" perm="+x"/>

	<concat destfile="${ibis}/bin/ibis_nameserver.bat">
	    <filelist dir="${ibis}" files="configuration.bat,src/scripts/ibis_nameserver.bat" />
	</concat>
	<chmod file="${ibis}/bin/ibis_nameserver.bat" perm="+x"/>
	<copy
		overwrite="true"
		file="${ibis}/src/scripts/ip_map.perl"
		tofile="${ibis}/bin/ip_map.perl">
	</copy>
	<chmod file="${ibis}/bin/ip_map.perl" perm="+x"/>

	<echo message="Now invoke ant java_wrapper"/>
	<antcall target="java_wrapper"/>
    </target>


    <target name="-config-lazy-build-properties"
	    unless="build-properties-available">
	<antcall inheritRefs="true" target="-config-build-properties"/>
    </target>


    <target name="config-init-initial" depends="config-init">
	<condition property="build-properties-available">
	    <available file="build-properties"/>
	</condition>
	<antcall inheritRefs="true" target="-config-lazy-build-properties"/>
    </target>


    <target name="property-init-once"
	    depends="property-compiler-init,proprietary-tasks">
    </target>


    <target name="proprietary-tasks">
	<mkdir dir="${ibis}/ant-tasks/tasks"/>
	<javac
		srcdir="${ibis}/ant-tasks"
		destdir="${ibis}/ant-tasks/tasks">
	    <include name="**/*.java"/>
	    <classpath refid="default.classpath"/>
	</javac>
	<taskdef
		name="hostname"
		classname="HostName"
		classpath="${ibis}/ant-tasks/tasks"/>
    </target>


    <target name="java-home-test" depends="config-init" unless="env.JAVA_HOME">
	<fail>Environment variable JAVA_HOME is not set!</fail>
    </target>


    <target name="configure"
	    depends="config-init, java-home-test"
	    description="Ibis build configuration for high-speed LAN modules">

	<input
		message="Please enter the install directory of gm: [${default.home.gm}] "
		addproperty="install.home.gm"/>
	<input
		message="Please enter the install directory of daslib: [${default.home.daslib}] "
		addproperty="install.home.daslib"/>
	<input
		message="Please enter the install directory of lfc: [${default.home.lfc}] "
		addproperty="install.home.lfc"/>
	<input
		message="Please enter the install directory of panda: [${default.home.panda}] "
		addproperty="install.home.panda"/>
	<input
		message="Please enter the install directory of mpi: [${default.home.mpi}] "
		addproperty="install.home.mpi"/>

	<property name="called-from-configure" value="true"/>
	<antcall inheritRefs="true" target="-config-build-properties"/>
    </target>


</project>
