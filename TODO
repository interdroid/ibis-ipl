*** Ibis 1.3 ***

general:
- keep a changelog, publish it on the website
- update documentation
- add a "functionality table" to website:
	1.1 = 1.0 + ...
	1.2 = 1.1 + MPJ + ...
	1.3 = 1.2 + SO + ...
- copy the source of "util" and "connect" to the distro manually
	
ipl:
- add delete(IbisIdentifier[] ibisses) to registry
- add calls to IPL: amount of data written/read in a message so far.
  this is needed for traffic shaping

satin:  
- check Satin Shared Objects for performance bugs
- detection of what is an inlet: now, if the invocation is inside a try-catch
  it is assumed to be an inlet. Is this OK?
- abort bug: throw an Exception instead of returning null. Sequential user
  code gets confused otherwise.

connect:
- Update manual and readme files to reflect new structure.


*** Ibis 2.0+ ***

general:
- ibisc : gmic + rmic + satinc + ... (does not replace javac)
- load ibisses dynamically from jar files (like JavaGAT)
- run central nameserver on fs0
- split up ibis.jar in multiple files (in a sane manner)
- binary release
- make javadoc available in a file for eclipse somehow
- move applications to a real tree
- switch to subversion
- traffic shaping
- steering interface
- remove deprecated functionality
- while(true) {fix eclipse warnings in net ibis, panda ibis}

nameserver+connection stuff:
- enable control hub by default --Rob
- if a control hub is started, ibises cannot connect to the normal server again? --Rob
- allow different connection types to nameserver simulaneously: 
  one ibis should be able to connect with routed messges, while others have a direct connection --Rob
- -Dibis.nameserver=SOME_IP -> kijk of 1 van onze interfaces SOME_IP heeft (niet alleen eerste)...
- add out-of-band communication support to the Nameserver interface

ipl:

- add a way to create local receiveports in addition to global receiveports
- add Registry.lookup(IbisIdentifier ibis, String receivePortName)
- add SendPort.connect(IbisIdentifier ibis, String receivePortName)
- remove Registry.lookupIbis()
- remove (deprecated) createIbis(String name)
- remove (deprecated) Ibis.name() 
  (get a unique name for an Ibis by calling IbisIdentifier.name() )
- change Ibis.toString() to returning a "friendly"(user-printable), but not 
  necessarily unique, string.
   
- IPL += sendPort.connect(ReceivePortIdentifier[] receivers);
- add receiveports local to an ibis:
	- receiveports not globally unique, but unique per ibis.
	- lookup method: recPortIdent lookup (ibisIdent, name)
	- and: recPortIdent[] lookup(name)
	- PortType.createReceivePort(..., ..., ..., boolean local); ??
- make classes in ipl abstract as much as possible
- close van poorten (in shutdownhooks)
  docs vertellen niet dat je niet een close mag doen terwijl een message
  levend is
  Ceriel: ??? Hoe doe je dat (in een shutdownhook belanden als er een message
  levend is ??? En, de javadocs vertellen dat wel degelijk.

rmi:
- check Ibis RMI registry:
  - you don't have to actually start one;
  - registers url's, not names.

satin:
- remove tuple space alltogether now ? --Rob
  Ceriel: lijkt me voorbarig zolang we applicaties hebben die het gebruiken.
+ add method to make deep copy for objects (use ibis.util.DeepCopy) --Done, Rob
- make scalable ibis / scalable satin (don't keep sockets open) --Rob
+ als exception gegooid wordt zonder catch krijgen we nu aborts... / geen
  print bij top of the stack.
- satinc barfs when you have a method that both spawns and has "synchronized"
  blocks. Reason: javac generates local variables for those, without entries
  in the local variable table.
- add semantic analysis to the compiler
- forgotten sync statements
- make return / throw an implicit sync again?
- add comments to abort / inlet machinism
- rob (na distro): check satin caches.
- shutdownhook -> System.exit
- satinc does not understand monitorenter/monitor exit instructions (othello) --Rob
+ move shared objects user API to satin package (remove satin.so package) --Rob
  Done (Ceriel)
+ add comments to user API for shared objects --Rob  Done (Ceriel)
- major satin cleanup (for ibis 2.0): remove old features, fix ugly structure --Rob
- remove all satin commandline options, use properties instead (now most options are there twice) --Rob

satin-so:
- talk to gosia about message combining bug, it basically cannot have worked --Rob
- fix statistics with message combining on, the only measure serialization time now, not the actual send time
  (maybe that's the reason why you thought message combining actually worked) --Rob
- also send when combined message reaches a certain size --Rob
- add stats to count the actual number of combined messages sent + ratio --Rob
- count all messages+sizes for the total messages/data sent statistics --Rob
- do not send the same object (and the same version) twice.
  This can happen if it is both broadcast, and pulled at the same time --Rob
- remove exportObject call somehow if possible (or at least give error message 
  if forgotten) --Rob
- Allow shared objects to be passed anywhere in the parameter data 
  structures. Now only directly as a param. Maybe use stubs instead of
  direct access? This would make the implementation much easier --Rob
- message combining does not help because:  (--Rob)
    - object-id is sent every time (long string)
    - combiner is synchronized
    - overhead of method calls, serialization
 

implementations:
- PandaIbis connection management broken (e.g. connectedTo())
  (who reported this? Please check if this is still actual ... I placed locks
   in them .... Ceriel) I did, I'll check :-) --Rob
- NetIbis: 
    - fix performance issues in net.gm (e.g.  mpj+javagrande benchmarks)
    - remove dependancy on "local" gm version in default set-up
    - connection cache cannot be disabled without triggering a bug:
      tcp_blk/TcpConnectionCache.java has:
        synchronized Socket getCachedInput(IbisIdentifier ibis, int port) {
            if (DISABLED) return null;
      tcp_blk/Driver.java has:
        while (true) {
            Socket s = connectionCache.getCachedInput(ibis, port);
	    if (s != null) return s;
	    ... wait ...
        }
      so: deadlock if DISABLED==true.

connect stuff:
- Rob: allow user to load socket types per *connection* use the 
       property map for this
- control hub client side always binds to default local ip/port (partially fixed, but not fully correct yet --Rob)
- routed messages logging crashes
- use routed messages *while* trying to setup TCP splicing in the background
- write a good anyTCP for control_links -Rob
- support universal plug and play

future projects:
- build *Ibis: a stacking ibis
