build system
- remove stupid hostname stuff. This caused our demo to fail during the tutorial --Rob

prun:
- add readme on how to start ibis with prun for the VU people
  (students keep complaining about this) --Rob
  
nameserver:
+ allow application to specify that it does not want joins. --Rob
+ allow app to specify that it wants joins, but not globally ordered. --Rob
+ nameserver is single threaded: if it cannot forward a join, everything hangs. --Rob
+ enable control hub by default --Rob
+ if a control hub is started, ibises cannot connect to the normal server again? --Rob
+ allow different connection types to nameserver simulaneously: 
  one ibis should be able to connect with routed messges, while others have a direct connection --Rob
+ -Dibis.nameserver=SOME_IP -> kijk of 1 van onze interfaces SOME_IP heeft (niet alleen eerste)...

+ we forget to close connections on errors, see for instance forwardJoin
  in NameServer.java --Rob (Occurred in many places. Fixed Ceriel)
+ nameserver needs to know classes of all ibis identifiers. 
  Not really an option for external ibises --Rob
  (Fixed Ceriel)
+ collect joins and leaves before sending them out to make things more scalable?
  (Done Ceriel)

general:
+ I cannot add an "external" ibis that ibis does not know about without
  changing the properties file in the original tree. --Rob (Fixed Ceriel)

+ als ik mijn ibis ident niet herschrijf -> satin crash --Rob (Fixed Ceriel)

ipl:
- IPL += sendPort.connect(ReceivePortIdentifier[] receivers);
- add receiveports local to an ibis:
	- receiveports not globally unique, but unique per ibis.
	- lookup method: recPortIdent lookup (ibisIdent, name)
	- and: recPortIdent[] lookup(name)
	- PortType.createReceivePort(..., ..., ..., boolean local); ??
- make classes in ipl abstract as much as possible
- close van poorten (in shutdownhooks)
  docs vertellen niet dat je niet een close mag doen terwijl een message
  levend is

rmi:
- check Ibis RMI registry:
  - you don't have to actually start one;
  - registers url's, not names.
+ BUGS in rmi stubs (& skeletons?) -> if there is an IOexception, messages
  are not finished! --Rob (Done (Ceriel))

satin:
+ remove tuple space alltogether now ? --Rob
+ add method to make deep copy for objects (use ibis.util.DeepCopy) --Rob
+ make scalable ibis / scalable satin (don't keep sockets open) --Rob
+ als exception gegooid wordt zonder catch krijgen we nu aborts... / geen
  print bij top of the stack.
+ bug: throws van runtime exception worden niet doorgegooid maar genegeerd.
  (Fixed Ceriel)
- add semantic analysis to the compiler
- forgotten sync statements
- make return / throw an implicit sync again?
- add comments to abort / inlet machinism
- detection of what is an inlet: now, if the invocation is inside a try-catch
  it is assumed to be an inlet. Is this OK?
- rob (na distro): check satin caches.
- shutdownhook -> System.exit

implementations:
- PandaIbis connection management broken (e.g. connectedTo())
  (who reported this? Please check if this is still actual ... I placed locks
   in them .... Ceriel) I did, I'll check :-) --Rob
- NetIbis: 
    - fix performance issues in net.gm (e.g.  mpj+javagrande benchmarks)
    + make it possible to make ipl classes use abstract. (Done Ceriel)
    - remove dependancy on "local" gm version in default set-up

connect stuff:
- Rob: Update manual and readme files to reflect new structure.
       But, first test it :-)
- Rob: allow user to load socket types per *connection* use the 
       property map for this
- control hub client side always binds to default local ip/port (partially fixed, but not fully correct yet --Rob)
- routed messages logging crashes
- use routed messages *while* trying to setup TCP splicing in the background
- write a good anyTCP for control_links -Rob
- support universal plug and play

general:
- ibisc
- load ibisses dynamically from jar files (like JavaGAT)
- run central nameserver on fs0
- split up ibis.jar in multiple files (in a sane manner)
- use a $IBIS_HOME variable instead of explicit paths in build files of
  applications
- make javadoc available in a file for eclipse somehow
- move applications to a real tree

future:
- add out-of-band communication support to the Nameserver interface
