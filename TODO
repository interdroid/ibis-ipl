Legend:
- = current
+ = done
* = new/changed since last core meeting

##### Ibis 2.0 ####

IPL:
- check properties for unknown properties
+ add "fillTimeout" option to sendport.connect(). (Done someone).
+ add a timeout parameter to getElectionResult() 
  (0 == forever, -1 == non-blocking) (Done Ceriel)

Ibis Factory:
- add support for stacking to the factory (don't add an Ibis to a stack twice)
+ add a flag to each Ibis to denote if it should be automatically selected or not.
  The dummy stacking Ibis should never be selected, nor should NioIbis
  (Done Ceriel)
+ Only select the first matching Ibis, don't try all of them. (Done Ceriel)
+ Add a seperate "checker" object for each Ibis implementation to determine
  which Ibis to use. (Done Ceriel: added IbisStarter object).

IbisC:
+ remove rewriting of "flat list of class files" (was bug in older javac versions; happened with .java files in the jar-file, but only when rewritten???).
  Moral: don't put .java files in your jars (Ceriel).
+ catch (NullPointeR) exceptions by Bcel, if possible (The exceptions themselves
  were fixed already  Ceriel)
+ add classes in the parameters to the classpath (Done Ceriel)
+ print some status output in ibisc (Done Ceriel)
- ant jar removes jar file :-)

capabilities:
- add ibis.io capabilities.
- add registry capabilities.

management:
- ibis.ipl.Managable: throw exception on unrecognized property name.
+ ibis.ipl.Managable: Map strings to strings instead of strings to object.
  (Done Ceriel)
* ibis printStatistics: replace by Managable.
* clarify JavaDoc of "count" methods in messages. E.g. Say we only count
  broadcast messages once.
* add basic network usage statistics to Ibis.

ibis registry:
- check if all Ibisses in a pool are of the same implementation, version, etc.
* forget unneeded event history OR stop giving these events to the user
* add an upcall for elections.
- Generic: if closed.world is selected, check if ibis.pool.size is set, and 
  ignore joins beyond size, and all leaves. Moved to registry, since this
  functionality should be in the registry (Ceriel).
* registry: avoid almost simultaneous connection attempts from multiple
  threads to a single server socket (seems to confuse smartsockets).
  This now happens with ping() and push(). Used to also happen with
  push() and push(), but I think I fixed that (Ceriel).

implementations:
+ TcpIbis: fork a thread immediately after doing an "accept". Don't do a 
  handshake first. (Done Jason, fixed Ceriel).
+ Fix deadlocks due to lazily creating serialization streams in TcpIbis.
  (Done Jason).
+ catch InvocationTargeExceptions, and thow the cause of this runtime exception
  instead. (Done Ceriel)
+ closing a receiveport twice returns an Error (fixed Ceriel)
+ _Never_ throw errors in Ibis, only Exceptions (fixed Ceriel)
+ remove Omnitimer, native object creation trick, and any remaining native
  node (done Ceriel)

applications:
- remove old-n-useless applications (if any)
- build jars by default

packaging/distribution:
* split up ibis in multiple separate subprojects:
	+ ipl
	+ ipl applications (Done Ceriel)
	- util
	+ server (Done Niels)
	+ io (Done Ceriel)
	+ compile (Done Ceriel)
	foreach(programming model) {
		- programming model
		- programming model applications
	}
	- standalone applications (DFA, SAT4Satin, Barnes)	
* put DeepCopy in a sane place
- update docs
- migrate leftover prints to log4j, surround with if (DEBUG){}
  in performance critical section
- while(true) {fix eclipse warnings}
- Api docs of IPL: read, clarify, improve (Niels: Done SendPort).
- clean-up scripts
-/+ fix automatic starting of Ibis-server in "ant test" and "ibis-prun" one way
  or another (ibis-prun done Ceriel)
- clean up doc building scripts
+ fix codmon (Done Ceriel)
+ put each ibis in a seperate jar (Done Ceriel)

website:
- update "ibis" overview picture with new/changed implementations
- add overview section
- update/create each subproject page
- add javadoc top-button where applicable

##### Ibis 2.X ####

Ibis:
- while(true) {fix eclipse warnings}
- more efficient clone? Maybe generate code that clones without using 
  serialization. Could be done for objects passed as a param
  to a spawn, for instance. If code is not there, fall back to current impl.

ibis registry:
- gossip Registry

implementations:
- fix/improve performance of MpiIbis
- Implement multi Ibis.
- Implement LRMC Ibis
- benchmark serialisation. Especially focus on the performance gain when
  rewriting the classlibs. This functionality is rather tricky, if it doesn't
  gain us anything anymore, we might as well remove it.

applications:
- check results of the different barnes versions

deployment/testing/benchmarking:
- implement "Ibis deployment application" using the GAT
- implement GUI/Scripting/Shell/Commandline interface on Ibis deployment app
- reimplement codmon on-top-of the GAT
- change codmon performance measurements to "sane" benchmarks


satin:
- add semantic analysis to the compiler
- forgotten sync statements
- make return / throw an implicit sync again?
- add comments to abort / inlet machinism
- shutdownhook -> System.exit
- satinc does not understand monitorenter/monitor exit instructions (othello)
- detection of what is an inlet: now, if the invocation is inside a try-catch
  it is assumed to be an inlet. Is this OK? (Maybe change to checked Exception)
- ant test should also run satin apps sequentially
  (It does, does'nt it? (Ceriel) No, it does not run non-rewritten code)
- investigate invocation record cache again. It makes a huge difference for
  performance of small tasks. The fact that it does not seem to work is an
  indication that there is a bug somewhere: someone touches an invocation
  record after it has been cleared!
- update docs: don't call System.exit at the end of main(). Satin should be
  allowed to terminate normally. If main() calls exit, fault-tolerance will
  think that the master died, and restart the master on another node!
  Or: could the Satin rewriter somehow deal with this? Or: shutdown hook?
- Bug: If the user "main" exits before all satin instances are fully
  initialized satin doesn't exit properly.

satin-so:
- count all messages+sizes for the total messages/data sent statistics --Rob
- do not send the same object (and the same version) twice.
  This can happen if it is both broadcast, and pulled at the same time --Rob
- Allow shared objects to be passed anywhere in the parameter data 
  structures. Now only directly as a param. Maybe use stubs instead of
  direct access? This would make the implementation much easier --Rob
- message combining does not help because:  (--Rob)
    - object-id is sent every time (long string)
    - combiner is synchronized
    - overhead of method calls, serialization
