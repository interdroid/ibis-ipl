This file acts as a placeholder for topics that need to be (further) discussed.
Topics at the top of the list are discussed first.
Feel free to add.


Topic		Short explanation
----------------------------------------------------------------------------
IbisC		progress/poblems/opinions

Jars		sane split of ibis.jar in multiple jars (possibly no split)

Ibis coordinator
		expand and formalize the nameserver interface. give it a
		better name (coordinator?) and use it in all (most?) Ibis
		implementations. Functionality includes:
		- registry
		- selection of ibis implementation.
		- run management (tell an Ibis to leave)
		- ibis group membership management
		- out of band ibis communication support

Streams		currently 2/3 of all ibis.io classes are streams. Moreover they
		all look the same :(
		(Ceriel: no they don't!)
		Could we somehow "merge" these streams
		into a smaller number of classes? 
		(Ceriel: that would mean combining some of them? Why?
		 How would that improve things?)
		Also: IbisSerializationOutputStream should not depend on
		java.io.ObjectOutputStream, as none is available in J2ME.
		(Ceriel: this is impossible. IbisSerializationOutputStream MUST
		 be an implementation/extension of java.io.ObjectOutputStream.
		 Please, read the Java Object Serialization Specification. If
		 J2ME does not have java.io.ObjectOutputStream, it does not
		 have object serialization, and I don't care. Also,
		 IbisSerializationOutputStream must be a sub-class of
		 DataSerializationOutputStream, or we would have a lot of
		 code duplication. This, together, means that
		 DataSerializationOutputStream must extend ObjectOutputStream
		 (since Java does not have multiple inheritance). We could
		 combine IbisSerialization and DataSerialization into one
		 by doing runtime tests where they differ.)
		
Abstract IPL	Most classes in the IPL should be abstract and include
		generic implementations whenever possible.
		- Connection management
		- Serialization stream selection / implementation
		- Compression
		- Encryption
		- Coordinator/Nameserver client code
		- Multicast
		- ?
		
Multicast	Mathijs's multicast work should be integrated in the Ibis IPL.

rmi helper class
		Would it be possible to write a small "helper" class to get
		people started with RMI. It could handle registry creation,
		initialize ibis, offer a nice interface for binding and such.
		(Ceriel: do you need more than apps/rmi/shared/RMI_init.java?)

*ibis		(pronounced multi Ibis). An Ibis designed to use other,
		possibly multiple, ibisses to actually communicate. Needs to
		be able to dynamicly add/remove ibis implementations.
