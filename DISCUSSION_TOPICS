This file acts as a placeholder for topics that need to be (further) discussed.
Topics at the top of the list are discussed first.
Feel free to add.


Topic		Short explanation
----------------------------------------------------------------------------
IbisC		progress/poblems/opinions

Jars		sane split of ibis.jar in multiple jars (possibly no split)

Ibis coordinator
		expand and formalize the nameserver interface. give it a
		better name (coordinator?) and use it in all (most?) Ibis
		implementations. Functionality includes:
		- registry
		- selection of ibis implementation.
		- run management (tell an Ibis to leave)
		- ibis group membership management
		- out of band ibis communication support

Streams		currently 2/3 of all ibis.io classes are streams. Moreover they
		all look the same :( Could we somehow "merge" these streams
		into a smaller number of classes? 
		Also: IbisSerializationOutputStream should not depend on
		java.io.ObjectOutputStream, as none is available in J2ME
		
Abstract IPL	Most classes in the IPL should be abstract and include
		generic implementations whenever possible.
		- Connection management
		- Serialization stream selection / implementation
		- Compression
		- Encryption
		- Coordinator/Nameserver client code
		- Multicast
		- ?
		
Multicast	Mathijs's multicast work should be integrated in the Ibis IPL.

rmi helper class
		Would it be possible to write a small "helper" class to get
		people started with RMI. It could handle registry creation,
		initialize ibis, offer a nice interface for binding and such.

*ibis		(pronounced multi Ibis). An Ibis designed to use other,
		possibly multiple, ibisses to actually communicate. Needs to
		be able to dynamicly add/remove ibis implementations.