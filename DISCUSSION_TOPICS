This file acts as a placeholder for topics that need to be (further) discussed.
Topics at the top of the list are discussed first.
Feel free to add.


Topic		Short explanation
----------------------------------------------------------------------------
Distribution	Bug reports and comments on the upcoming monolithic distibution.
                Dir structure: move build-*, ant-tasks, bcel-additions to subdir?
                Code formatting (distro / cvs / both) ?

Grun		Do we include grun in the distribution or make a 
		seperate release of grun?

run_ibis	run_ibis 0 2 pool 4566 fs0 Main (current)
		OR
		run_ibis 0 2 pool fs0:4566 Main
		OR
		run_ibis 0 2 -Dibis.pool=pool -Dibis.nameserver=fs0:4566 Main
		OR
		...

Binary distro	Do we want it? In what form? Timeframe?

Central nameserver
		Is it useful to have a single, central nameserver running
		on at least the fs0?

IbisC		The Ibis Compiler. Alternative for building apps to ANT?
		Default build system for binary distro?

build.xml	The build system has a few problems:
		- slow^2 (due to recursive ant calls)
		- too verbose
		- apps building depends on whole tree
		- apps building depends on included ant
		- no "ant dist" => binairy-distro.tar.gz
		- no way of building entiry tree (including apps) from root
		- no support for automatic testing/benchmarking

Multicast	Mathijs's multicast work should be integrated in the Ibis IPL.
		IPL += sendPort.connect(ReceivePortIdentifier[] receivers);

Abstract IPL	Most classes in the IPL should be abstract and include
		generic implementations whenever possible.
		- Connection management
		- Serialization stream selection / implementation
		- Compression
		- Encryption
		- Coordinator/Nameserver client code
		- Multicast
		- ?

Tcp connect	NioIbis should have support for the tcp connect stuff
		need connect support for channels.

rmi helper class
		Would it be possible to write a small "helper" class to get
		people started with RMI. It could handle registry creation,
		initialize ibis, offer a nice interface for binding and such.

Ibis coordinator
		expand and formalize the nameserver interface. give it a
		better name (coordinator?) and use it in every Ibis
		implementation. New functionality includes:
		- selection of ibis implementation.
		- management (tell an Ibis to leave)
		- ?

*ibis		(pronounced multi Ibis). An Ibis designed to use other,
		possibly multiple, ibisses to actually communicate. Needs to
		be able to dynamicly add/remove ibis implementations.

p2p coordinator	
		alternative coordinator implementation which has support for
		using Ibis in an p2p envoronment. Has some sort of scheduler,
		file transfer support, and such. Forks new virtual machines
		to run an app in.
		
