<project
    name="satin-app"
    default="build"
    basedir=".">

    <import file="${ibis}/build-files/build-properties.xml"/>
    <import file="${ibis}/build-files/build-iogen.xml"/>
    <import file="${ibis}/build-files/build-native.xml"/>
    <import file="${ibis}/build-files/apps/build-run.xml"/>

    <description>
	Ibis satin application build
    </description>

    <target name="property-satin-build" unless="build">
	<echo message="build is undefined. Set it to the default value"/>
	<property name="build" location="build"/>
	<mkdir dir="${build}"/>
    </target>

    <target name="satin-init"
	    depends="property-satin-build,property-init"/>

    <target name="satin"
	    depends="satin-init">
	    <!-- Commented out description
	    description="Preprocess all classes in the build tree for Satin"
	    -->
	<if>
	    <isset property="satinc-flags"/>
	    <then>
		<property name="satinc-flags.value" value="${satinc-flags}"/>
	    </then>
	    <else>
		<property name="satinc-flags.value" value=""/>
	    </else>
	</if>

	<java	classname="ibis.frontend.satin.Satinc"
		taskname="Satinc"
		dir="${build}"
		failonerror="true"
		maxmemory="256M"
		fork="true">
		<arg line="-dir ${satinc-flags.value} ${satin-main-class}"/>
		<classpath refid="default.classpath"/>
	</java>

    </target>

    <target name="satin-so"
            description="Generates stubs and skeletons for Satin shared objects">
            
	<if>
	    <isset property="satinsoc-flags"/>
	    <then>
		<property name="satinsoc-flags.value" value="${satinsoc-flags}"/>
	    </then>
	    <else>
		<property name="satinsoc-flags.value" value=""/>
	    </else>
	</if>
            
        
        <if>
            <isset property="satin-so-classes"/>
            <then>
                <java   classname="ibis.frontend.satin.so.SatinSOc"
                    taskname="SatinSOc"
                    dir="${build}"
                    failonerror="true"
                    fork="true">          
                    <arg line="-javahome '${JAVA_HOME}' -dir ${satinsoc-flags.value} ${satin-so-classes}"/>
                    <classpath refid="default.classpath"/>
                </java>
            </then>
        </if>
        
    </target>

    <target name="init">
	<tstamp/>
	<mkdir dir="${build}"/>
    </target>

    <target name="compile"
	    depends="init,property-init"
	    description="Compile Satin application for sequential execution">
	<if>
	    <isreference refid="src.excludes-ref"/>
	    <then>
		<property name="pwd" location="."/>
		<pathconvert pathsep="${line.separator}" property="src.excludes" refid="src.excludes-ref">
		    <map from="${pwd}${file.separator}" to=""/>
		</pathconvert>
		<echo message="${src.excludes}" file="${build}/excludes"/>
	    </then>
	</if>

	<javac  destdir="${build}"
		debug="${java.debug.value}"
		includes="**/*.java"
		excludes="${build}/*.java"
		srcdir=".">
	    <classpath refid="default.classpath"/>
	    <excludesfile name="${build}/excludes" if="src.excludes"/>
	</javac>
    </target>

    <target name="build-no-satin">
	<antcall inheritAll="true" inheritRefs="true" target="compile"/>
    </target>
    
    <target name="build-no-so"
	    description="Compile Satin application for parallel execution">
	<if>
	    <isset property="satinc-flags"/>
	    <then>
		<property name="satinc-flags.value" value="${satinc-flags} -no-so"/>
	    </then>
	    <else>
		<property name="satinc-flags.value" value="-no-so"/>
	    </else>
	</if>
	    
	<antcall inheritAll="true" inheritRefs="true" target="compile"/>
	<antcall inheritRefs="true" target="satin"/>
    	<antcall inheritRefs="true" target="iogen"/>
    </target>


    <target name="build"
	    description="Compile Satin application for parallel execution">
	<antcall inheritAll="true" inheritRefs="true" target="compile"/>
	<antcall inheritRefs="true" target="satin"/>
	<antcall inheritRefs="true" target="satin-so"/>
	<antcall inheritRefs="true" target="iogen"/>
    </target>

    <target name="clean">
	<delete dir="${build}"/>
    </target>

</project>
