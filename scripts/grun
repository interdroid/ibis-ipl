#!/bin/bash # emacs likes this :-)

#Questions? Ask me! (maik@cs.vu.nl)

#This script uses globus to run ibis at multiple sites. You should have
#initialized your grid proxy before using it

#options: -d : debug, don't delete temp files / trees

#The first paramter is the port at which to run the nameserver
#(to allow multiple simultanuous runs with grun).

#The following parameters are of the form <site> <count> where
#     <site> is a file in the $IBIS_ROOT/globus/sites directory with
#            settings for a site
#and <count> is the number of processors to allocate at that site

#The <site> <count> pairs are terminated by a - , after which the java
#class and its parameters follow

GRUN_PATH=$IBIS_ROOT/globus
SITES_PATH=$GRUN_PATH/sites

USAGE="usage: $0 [-d] [-icp <extra ibisclasspath> ] <nameserver-port> [ <site> <count> ]+ - <class name> <parameters>"

DEBUG=off
IBISCLASSPATH=build
#read any options
while true; do
	case $1 in
	-ibisclasspath | -icp)
		IBISCLASSPATH=$IBISCLASSPATH:$2
		shift 2 ;;
	-help | -h)
		echo $USAGE
		exit 1 ;;
	-d | -debug)
		DEBUG=on
		shift ;;
	-*)
		echo invalid option: $1
		echo $USAGE
		exit 1 ;;
	*)
		break ;;
	esac
done

NS_PORT=$1
shift 1
if [ -z "$NS_PORT" ]; then
	echo $USAGE
	exit 1
fi

#check if something already runs on the specified port
if [ -n "$(netstat -an | grep $NS_PORT | grep LISTEN)" ]; then
	echo $0: Port $NS_PORT is already in use!
	exit 1
fi
NS_PARAMS="-Dibis.name_server.host=fs0.das2.cs.vu.nl -Dibis.name_server.port=$NS_PORT"
NS_PARAMS="$NS_PARAMS -Dibis.name_server.key=grun$$"

#read settings for the sites until we encounter a '-', and calculate
#the total count of jobs
SITE_SETTINGS="HOSTNAME JOBMGR SPLIT"
declare -i TOTAL_COUNT=0
declare -i COUNT
SITES=

while [ "$1" != "-" ]; do
	if [ $2 -le 0 ]; then
		echo Illegal count '('$2')' for site $1.
		exit 1
	fi

	if [ ! -f $SITES_PATH/$1 ]; then
		echo Settings for site $1 not found! Exiting..
		exit 1
	fi

	for s in $SITE_SETTINGS; do
		LINE=$(cat $SITES_PATH/$1 | egrep "^$s=")
		if [ -z $LINE ]; then
			echo $s not found in $SITES_PATH/$1, exiting..
			exit 1
		fi
		eval ${1}_$s=$(echo $LINE | sed "s/$s=//")
	done

	SITES="$SITES $1"
	eval $1_COUNT=$2

	TOTAL_COUNT=$TOTAL_COUNT+$2
	shift 2
done

shift 1 #skip the '-'
APP_CLASS_PARAMS=$*

if [ -z $(pwd | egrep "^$IBIS_ROOT") ]; then
	echo $0: You are not running an application in the ibis tree!
	exit 1
fi

APP_DIR=$(pwd | cut -c$(echo $IBIS_ROOT/ | wc -c)-)

#at this point all settings are read, the work can begin...

#If this flag gets set to true, nothing will be run
ABORT=

#create $IBIS_ROOT/ibis.tgz
(
	cd $IBIS_ROOT;
	FILES=`find . -name "*properties"` #properties files
	FILES="$FILES build"               #ibis build tree
	FILES="$FILES $APP_DIR/*.class"    #application classes
	#also include the pics subdir for the raytracer
	#(can't include all dirs, the output directories are also there)
	if [ -d $APP_DIR/pics ]; then
	    FILES="$FILES $APP_DIR/pics/*"
	fi

	rm -f ibis$$.tgz;
	tar cfz ibis$$.tgz $FILES
)

#generate master and slave scripts for this run

echo "#!/bin/sh" > grun-master$$
echo APP_DIR=$APP_DIR >> grun-master$$
echo MODE=master >> grun-master$$
echo JOBID=$$ >> grun-master$$
echo IBISCLASSPATH=$IBISCLASSPATH >> grun-master$$
cat $GRUN_PATH/grun-remote >> grun-master$$

echo "#!/bin/sh" > grun-slave$$
echo APP_DIR=$APP_DIR >> grun-slave$$
echo MODE=slave >> grun-slave$$
echo JOBID=$$ >> grun-slave$$
echo IBISCLASSPATH=$IBISCLASSPATH >> grun-slave$$
cat $GRUN_PATH/grun-remote >> grun-slave$$

chmod a+x grun-master$$ grun-slave$$


echo $0: creating grun$$.rsl...

#little piece of common rsl
echo + > grun$$.rsl

for i in $SITES; do
	#automatically create indirect variables for use later on
	for s in $SITE_SETTINGS; do
		eval ${s}_VAR=${i}_$s
	done
	eval COUNT_VAR=${i}_COUNT

	declare -i SLAVES=${!COUNT_VAR}-1

	echo $0: copying ibis to ${!HOSTNAME_VAR}...
	if ! ssh -p 2222 ${!HOSTNAME_VAR} mkdir tmp$$ ||
	   ! scp -P 2222 $IBIS_ROOT/ibis$$.tgz ${!HOSTNAME_VAR}:tmp$$/ibis.tgz;
	then
		echo $0: Error while copying ibis to ${!HOSTNAME_VAR}! Aborting!
		ABORT=true
		break
	fi

	#remove any possibly remaining master_is_ready indicator
	ssh -p 2222 ${!HOSTNAME_VAR} rm grun$$_master_is_ready

	#generate master-rsl for this site
	echo "(&" >> grun$$.rsl
	echo "(resourceManagerContact=${!HOSTNAME_VAR}/${!JOBMGR_VAR})" >> grun$$.rsl
	echo "(subjobStartType=strict-barrier)" >> grun$$.rsl
	echo "(label=$i-master)" >> grun$$.rsl
	echo "(maxWallTime=60)" >> grun$$.rsl
	echo "(count=1)" >> grun$$.rsl
	echo '(stdout=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-output/$$${i}m.out')' >> grun$$.rsl
	echo '(stderr=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-output/$$${i}m.err')' >> grun$$.rsl
	echo '(executable=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-master$$')' >> grun$$.rsl
	echo "(arguments=\"-Dibis.pool.total_hosts=$TOTAL_COUNT -Dcluster=${!HOSTNAME_VAR} $NS_PARAMS $APP_CLASS_PARAMS\")" >> grun$$.rsl
	#(directory) isn't set, grun-master$$ should be run in the (default)
	#home dir
	echo ")" >> grun$$.rsl

	if [ $SLAVES -ge 1 ]; then
		if [ "${!SPLIT_VAR}" = "true" ]; then
			#generate rsl for each slave separately (needed on rage1)
			for j in `seq 1 $SLAVES`; do
				echo "(&" >> grun$$.rsl
				echo "(resourceManagerContact=${!HOSTNAME_VAR}/${!JOBMGR_VAR})" >> grun$$.rsl
				echo "(subjobStartType=strict-barrier)" >> grun$$.rsl
				echo "(label=$i-slave$j)" >> grun$$.rsl
				echo "(maxWallTime=60)" >> grun$$.rsl
				echo "(count=1)" >> grun$$.rsl
				echo '(stdout=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-output/$$${i}-${j}s.out')' >> grun$$.rsl
				echo '(stderr=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-output/$$${i}-${j}s.err')' >> grun$$.rsl
				echo '(executable=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-slave$$')' >> grun$$.rsl
				echo "(arguments=\"-Dibis.pool.total_hosts=$TOTAL_COUNT -Dcluster=${!HOSTNAME_VAR} $NS_PARAMS $APP_CLASS_PARAMS\")" >> grun$$.rsl
				#(directory) isn't set, grun-slave$$ should be run in the
				#(default) #home dir
				echo ")" >> grun$$.rsl
			done
		else 
			#generate rsl for $SLAVES slaves
			echo "(&" >> grun$$.rsl
			echo "(resourceManagerContact=${!HOSTNAME_VAR}/${!JOBMGR_VAR})" >> grun$$.rsl
			echo "(subjobStartType=strict-barrier)" >> grun$$.rsl
			echo "(label=$i-slave)" >> grun$$.rsl
			echo "(maxWallTime=60)" >> grun$$.rsl
			echo "(count=$SLAVES)" >> grun$$.rsl
			echo '(stdout=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-output/$$${i}s.out')' >> grun$$.rsl
			echo '(stderr=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-output/$$${i}s.err')' >> grun$$.rsl
			echo '(executable=$(GLOBUSRUN_GASS_URL)'`pwd`/grun-slave$$')' >> grun$$.rsl
			echo "(arguments=\"-Dibis.pool.total_hosts=$TOTAL_COUNT -Dcluster=${!HOSTNAME_VAR} $NS_PARAMS $APP_CLASS_PARAMS\")" >> grun$$.rsl
			#(directory) isn't set, grun-slave$$ should be run in the
			#(default) #home dir
			echo ")" >> grun$$.rsl
		fi
    fi
done

if [ "$ABORT" != "true" ]; then
	mkdir -p grun-output

	#everything's prepared now, start running
	$IBIS_ROOT/bin/ibis_nameserver -port $NS_PORT -single &
	NS_PID=$!
	globusrun -s -f grun$$.rsl
fi

#remove temp files
if [ "$DEBUG" = "off" ]; then
	echo removing temp files..
	rm grun$$.rsl grun-master$$ grun-slave$$ $IBIS_ROOT/ibis$$.tgz

	#grun_remote doesn't know if all jobs at the same site are finished,
	#so I remove the ibis tree here
	RM_PIDS=
	for i in $SITES; do
		eval HOSTNAME_VAR=${i}_HOSTNAME
		ssh -p 2222 ${!HOSTNAME_VAR} rm -rf tmp$$ grun$$_master_is_ready &
		RM_PIDS="$RM_PIDS $!"
	done
	#wait for the removes to terminate
	for i in $RM_PIDS; do wait $i; done
fi

kill -9 $NS_PID
