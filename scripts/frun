#!/bin/sh #emacs likes this :-)

# Runs a Java application on the front end machines of multiple clusters
# This scripts is largely based on "pprun" by Maik Nijhuis 
# author: Mathijs den Burger

# This script uses the RSH and RCP properties in the site files,
# which indicatethe remote shell and remote copy command to use for 
# the site, repectively.
# You should have a ssh public key on all sites you want to run at,
# or a valid globus certificate for those sites.

# options: -d: 
#              debug, don't delete temp files / trees
#          -icp <extra ibisclasspath>: 
#              extra classpaths, relative to IBIS_ROOT, separated by colons

# The first parameter is the port at which to run the nameserver
# (to allow multiple simultanuous runs).

# The following parameters indicate the site-files where the application
# should be run on the front-end machines. 

# The site-files are terminated by a - , after which the java
# class and its parameters follow

# An Ibis nameserver is started automatically for each run, which is killed
# after a run is completed.

GRUN_PATH=$IBIS_ROOT/ibis/globus
SITES_PATH=$GRUN_PATH/sites

USAGE="usage: $0 [-d] [-t <time>] [-icp <extra ibisclasspath> ] <nameserver-port> [ <site> ]+ -
      <class name> <parameters>"

DEBUG=off
IBISCLASSPATH=ibis/classlibs:.
FILES=

#read any options
while true; do
	case $1 in
	-help | -h)
		echo $USAGE
		exit 1 ;;
	-d | -debug)
		DEBUG=on
		echo - Debugging enabled
		shift ;;
	-ibisclasspath | -icp)
		IBISCLASSPATH=$IBISCLASSPATH:$2
		FILES="$FILES $2"
		shift 2 ;;
	-*)
		echo invalid option: $1
		echo $USAGE
		exit 1 ;;
	*)
		break ;;
	esac
done

NS_PORT=$1
shift 1
if [ -z "$NS_PORT" ]; then
	echo $USAGE
	exit 1
fi

# check if something already runs on the specified port
if [ -n "$(netstat -nlt | grep $NS_PORT | grep LISTEN)" ]; then
	echo $0: Port $NS_PORT is already in use!
	exit 1
fi
NS_PARAMS="-Dibis.name_server.host=`hostname -f` -Dibis.name_server.port=$NS_PORT"
NS_PARAMS="$NS_PARAMS -Dibis.name_server.key=frun$$"

# check if your Grid proxy is still valid
if [ -n "$(grid-proxy-info | grep 'timeleft : 0:00:00')" ]; then
	echo $0: Your grid proxy is not valid anymore, please create a new one
	exit 1
fi

#parse IBISCLASSPATH
CLASSPATH=
for i in $(echo $IBISCLASSPATH | sed 's/:/ /g'); do
	CLASSPATH=$CLASSPATH:'$HOME'/tmp$$/$i
done

#read settings for the sites until we encounter a '-', and calculate
#the total count of jobs
SITE_SETTINGS="HOSTNAME JAVA_HOME RSH RCP"
declare -i TOTAL_COUNT=0
declare -i COUNT
SITES=

while [ "$1" != "-" ]; do
	#if [ $2 -le 0 ]; then
	#	echo Illegal count '('$2')' for site $1.
	#	exit 1
	#fi

	if [ ! -f $SITES_PATH/$1 ]; then
		echo Settings for site $1 not found! Exiting..
		exit 1
	fi

	for s in $SITE_SETTINGS; do
		LINE=$(cat $SITES_PATH/$1 | egrep "^$s=")
		if [ -z "$LINE" ]; then
			echo $s not found in $SITES_PATH/$1, exiting..
			exit 1
		fi
		eval ${1}_$s=$(echo $LINE | sed "s/$s=//")
	done

	SITES="$SITES $1"
	eval $1_COUNT=1

	TOTAL_COUNT=$TOTAL_COUNT+1
	shift
done

shift 1 #skip the '-'
APP_CLASS_PARAMS=$*

if [ -z $(pwd | egrep "^$IBIS_ROOT/ibis") ]; then
	echo $0: You are not running an application in the ibis tree!
	exit 1
fi

APP_DIR=$(pwd | cut -c$(echo $IBIS_ROOT/ | wc -c)-)

#at this point all settings are read, the work can begin...

echo - SessionID: $$

#create $IBIS_ROOT/ibis.tgz
(
	cd $IBIS_ROOT

	FILES="$FILES $(find ibis -name *properties -maxdepth 1)"
	FILES="$FILES $(find ibis/bcel-additions -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/classfile -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/frontend -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/group -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/io -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/ipl -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/rmi -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/satin -name *.class -or -name *properties -or -name *.jar)"
	FILES="$FILES $(find ibis/util -name *.class -or -name *properties -or -name *.jar)"
	#also include $APP_DIR and its subdirs
	FILES="$FILES $(find $APP_DIR -name *.class -or -name *.jar -or -name *.txt -or -name *.chain -or -name *.tree)"
	#FILES="$FILES $(find $APP_DIR -path "$APP_DIR/*/*")"
	#and the libraries
	FILES="$FILES $(find ibis/lib -path "ibis/lib/*" -and -name *.so)"

	rm -f ibis$$.tgz
	tar cfz ibis$$.tgz $FILES
)

echo -n "- Starting Ibis name server..."
$IBIS_ROOT/ibis/bin/ibis_nameserver -port $NS_PORT &
NS_PID=$!
echo "done."

FRUN_PIDS=
for s in $SITES; do
	# create (indirect) variables for use later on
	RSH_VAR=${s}_RSH
	RCP_VAR=${s}_RCP
	JAVA_HOME_VAR=${s}_JAVA_HOME
	HOSTNAME_VAR=${s}_HOSTNAME

	# copy the Ibis tree
	echo - Copying Ibis to ${!HOSTNAME_VAR}:
	${!RSH_VAR} ${!HOSTNAME_VAR} "test -d tmp$$ || mkdir tmp$$"
	${!RCP_VAR} $IBIS_ROOT/ibis$$.tgz ${!HOSTNAME_VAR}:tmp$$/ibis.tgz

	# create a script to unpack the tree and run java from the right directory
	echo '#!/bin/sh' > frun_remote$$$s
	echo 'if [ -f .bashrc ]; then . .bashrc; fi' >> frun_remote$$$s
	echo 'if [ -f /etc/gridlab.conf ]; then . /etc/gridlab.conf; fi' >> frun_remote$$$s

	echo "cd ~/tmp$$" >> frun_remote$$$s
	echo "tar xfz ibis.tgz" >> frun_remote$$$s

	echo -n JAVACLASSPATH= >> frun_remote$$$s
	echo -n "$CLASSPATH:" >> frun_remote$$$s
	echo -n "${!JAVA_HOME_VAR}/jre/lib/rt.jar:" >> frun_remote$$$s
	echo -n "${!JAVA_HOME_VAR}/jre/lib/core.jar:" >> frun_remote$$$s
	echo -n "${!JAVA_HOME_VAR}/jre/lib/server.jar:" >> frun_remote$$$s
	echo -n "${!JAVA_HOME_VAR}/jre/lib/security.jar:" >> frun_remote$$$s
	echo "~/tmp$$" >> frun_remote$$$s

	echo "cd ~/tmp$$/$APP_DIR" >> frun_remote$$$s
	echo -n "${!JAVA_HOME_VAR}/bin/java " >> frun_remote$$$s
	#echo -n "-subst LD_ASSUME_KERNEL=2.2.5 " >> frun_remote$$$s
	#echo -n '$HOME'"/tmp$$/run_java " >> frun_remote$$$s
	#echo -n "${!COUNT_VAR} " >> frun_remote$$$s
	echo -n "-Dsun.boot.library.path=" >> frun_remote$$$s
	echo -n '$HOME'"/tmp$$/ibis/lib:" >> frun_remote$$$s
    echo -n "${!JAVA_HOME_VAR}/jre/bin:" >> frun_remote$$$s
	echo -n "${!JAVA_HOME_VAR}/jre/lib/i386 " >> frun_remote$$$s
	echo -n "-Dibis.property.file=" >> frun_remote$$$s
	echo -n '$HOME'"/tmp$$/ibis/properties " >> frun_remote$$$s
	echo -n "-Dibis.pool.total_hosts=$TOTAL_COUNT " >> frun_remote$$$s
	echo -n '-Dcluster=`hostname -f` ' >> frun_remote$$$s
	echo -n "-Dibis.name_server.key=frun$$ " >> frun_remote$$$s
	echo -n "-Dibis.name_server.port=$NS_PORT " >> frun_remote$$$s
	echo -n "-Dibis.name_server.host=`hostname -f` " >> frun_remote$$$s
	#echo -n '-Dibis.pool.host_names="$HOSTS" -Xmx400M ' >> frun_remote$$$s
	#echo -n '-Dibis.pool.host_number=0 ' >> frun_remote$$$s
	echo -n -Xbootclasspath:'$JAVACLASSPATH ' >> frun_remote$$$s
	echo -n -classpath '$JAVACLASSPATH ' >> frun_remote$$$s
	echo -n "$APP_CLASS_PARAMS " >> frun_remote$$$s
	echo " > ~/tmp$$/frun$$-$s 2>&1" >> frun_remote$$$s
	chmod a+x frun_remote$$$s
	
	${!RCP_VAR} frun_remote$$$s ${!HOSTNAME_VAR}:tmp$$/frun_remote	
	if [ "$DEBUG" = "off" ]; then rm frun_remote$$$s; fi
	${!RSH_VAR} ${!HOSTNAME_VAR} tmp$$/frun_remote &
	FRUN_PIDS="$FRUN_PIDS $!"
done

# wait for the pruns to terminate
echo "- Executing application..."
for i in $FRUN_PIDS; do wait $i; done

# kill the name server
echo -n "- Killing Ibis name server..."
REAL_NS_PID=`netstat -ltp 2>/dev/null | grep LISTEN | grep $NS_PORT | sed 's/.*LISTEN//' | sed 's/[ ]*\([0-9]*\)\/java/\1/'`
if [ -n "$REAL_NS_PID" ]; then kill -9 $REAL_NS_PID >/dev/null 2>&1; fi
echo "done."

# copy output files
echo - Gathering output:
mkdir -p frun-output
for s in $SITES; do
	# create indirect variables for use later on
	HOSTNAME_VAR=${s}_HOSTNAME
	RCP_VAR=${s}_RCP

	${!RCP_VAR} ${!HOSTNAME_VAR}:tmp$$/frun$$-$s* frun-output/
done


#remove temp files
if [ "$DEBUG" = "off" ]; then
	echo - Removing temporary Ibis trees...
	rm $IBIS_ROOT/ibis$$.tgz

	#remove the temp ibis tree here
	for s in $SITES; do
		HOSTNAME_VAR=${s}_HOSTNAME
		RSH_VAR=${s}_RSH

		${!RSH_VAR} ${!HOSTNAME_VAR} "test -d tmp$$ && rm -rf tmp$$"
	done
fi

echo - Done.

